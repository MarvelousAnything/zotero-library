This mathematical physics contribution to the Computer Algebra Recipes series
is dedicated to my wife Karen, who lights my path through life.

Richard H. Enns
Computer Algebra Recipes for Mathematical Physics
Birkha¨user Boston • Basel • Berlin

Richard H. Enns Simon Fraser University Department of Physics Burnaby, B.C. V5A 1S6 Canada
AMS Subject Classiﬁcations (2000): 15A90, 30-XX, 33-XX, 34-XX, 35-XX, 35Qxx, 40-XX, 42-XX, 44-XX, 49-XX, 65-XX, 68-XX, 70-XX, 97U50

ISBN 0-8176-3223-9

Printed on acid-free paper.

c 2005 Birkha¨user Boston All rights reserved. This work may not be translated or copied in whole or in part without the written permission of the publisher (Birkha¨user Boston, c/o Springer Science+Business Media Inc., Rights and Permissions, 233 Spring Street, New York, NY 10013, USA), except for brief excerpts in connection with reviews or scholarly analysis. Use in connection with any form of information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or hereafter developed is forbidden. The use in this publication of trade names, trademarks, service marks and similar terms, even if they are not identiﬁed as such, is not to be taken as an expression of opinion as to whether or not they are subject to proprietary rights.
Printed in the United States of America. (HP)

987654321

SPIN 10923559

www.birkhauser.com

Preface
This book is a self-contained guide to problem-solving and exploration in mathematical physics using the powerful Maple 9.5 computer algebra system (CAS). With a CAS one cannot only crunch numbers and plot results, but also carry out the symbolic manipulations which form the backbone of mathematical physics.
The heart of this text consists of over 230 useful and stimulating “classic” computer algebra worksheets or recipes, which are systematically organized to cover the major topics presented in the standard Mathematical Physics course oﬀered to third or fourth year undergraduate physics and engineering students. The emphasis here is on applications, with only a brief summary of the underlying theoretical ideas being presented. The aim is to show how computer algebra can not only implement the methods of mathematical physics quickly, accurately, and eﬃciently, but can be used to explore more complex examples which are tedious or diﬃcult or even impossible to implement by hand.
The recipes are grouped into three sections, the introductory Appetizers dealing with linear ordinary diﬀerential equations (ODEs), series, vectors, and matrices. The more advanced Entrees cover linear partial diﬀerential equations (PDEs), scalar and vector ﬁelds, complex variables, integral transforms, and calculus of variations. Finally, in the Desserts the emphasis is on presenting some analytic, graphical, and numerical techniques for solving nonlinear ODEs and PDEs. The numerical methods are also applied to linear ODEs and PDEs.
No prior knowledge of Maple is assumed in this text, the relevant command structures being introduced on a need-to-know basis. The recipes are thoroughly annotated and, on numerous occasions, presented in a “story” format or in a historical context. Each recipe takes the reader from the analytic formulation or statement of a representative type of mathematical physics problem to its analytic or numerical solution and to a graphical visualization of the answer, where relevant. The graphical representations vary from static 2-dimensional pictures, to contour and vector ﬁeld plots, to 3-dimensional graphs that can be rotated, to animations in time. For your convenience, all 230 recipes are included on the accompanying CD.
The range of mathematical physics problems that can be solved with the enclosed recipes is only limited by your imagination. By altering the parameter values, or initial conditions, or equation structure, thousands of other problems can be easily generated and solved. “What if?” questions become answerable. This should prove extremely useful to instructor and student alike.

Contents

Preface

v

INTRODUCTION

1

A. Computer Algebra Systems . . . . . . . . . . . . . . . . . . . . . . 1

B. Computer Algebra Recipes . . . . . . . . . . . . . . . . . . . . . . . 2

C. Maple Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3

D. Introductory Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . 4

D.1 A Dangerous Ride? . . . . . . . . . . . . . . . . . . . . . . . . . 4

D.2 The Patrol Route of Bertie Bumblebee . . . . . . . . . . . . . . 7

E. How to Use this Text . . . . . . . . . . . . . . . . . . . . . . . . . . 10

I THE APPETIZERS

11

1 Linear ODEs of Physics

13

1.1 Linear ODEs with Constant Coeﬃcients . . . . . . . . . . . . . . 13

1.1.1 Dazzling Dsolve Debuts . . . . . . . . . . . . . . . . . . . 14

1.1.2 The Tale of the Turbulent Tail . . . . . . . . . . . . . . . 18

1.1.3 This Bar Doesn’t Serve Drinks . . . . . . . . . . . . . . . 21

1.1.4 Shake, Rattle, and Roll . . . . . . . . . . . . . . . . . . . 25

1.1.5 “Resonances”, A Recipe by I. M. Curious . . . . . . . . . 27

1.1.6 Mr. Dirac’s Famous Function . . . . . . . . . . . . . . . . 32

1.2 Linear ODEs with Variable Coeﬃcients . . . . . . . . . . . . . . 36

1.2.1 Introducing the Sturm–Liouville Family . . . . . . . . . . 36

1.2.2 Onset of Bending in a Vertical Antenna . . . . . . . . . . 42

1.2.3 The Quantum Oscillator . . . . . . . . . . . . . . . . . . . 44

1.2.4 Going Green, the Mathematician’s Way . . . . . . . . . . 48

1.2.5 In Search of a More Stable Existence . . . . . . . . . . . . 51

1.3 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 54

01-S01 Newton’s Law of Cooling . . . . . . . . . . . . . . . . . . 54

01-S02 Charging a Capacitor . . . . . . . . . . . . . . . . . . . . 55

01-S03 Radioactive Chain . . . . . . . . . . . . . . . . . . . . . . 55

viii

CONTENTS

01-S04 Newton and Stokes Join Forces . . . . . . . . . . . . . . . 55 01-S05 Exploring the RLC Series Circuit . . . . . . . . . . . . . . 55 01-S06 The Whirling Bar Revisited . . . . . . . . . . . . . . . . . 56 01-S07 Driven Coupled Oscillators . . . . . . . . . . . . . . . . . 56 01-S08 Some Properties of the Delta Function . . . . . . . . . . . 56 01-S09 A Green Function . . . . . . . . . . . . . . . . . . . . . . 56 01-S10 A Potpourri of General Solutions . . . . . . . . . . . . . . 57 01-S11 Chebyshev Polynomials . . . . . . . . . . . . . . . . . . . 57 01-S12 The Growing Pendulum . . . . . . . . . . . . . . . . . . . 57 01-S13 Another Green Function . . . . . . . . . . . . . . . . . . . 58 01-S14 Going Green, Once Again . . . . . . . . . . . . . . . . . . 58

2 Applications of Series

59

2.1 Taylor Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59

2.1.1 Polynomial Approximations . . . . . . . . . . . . . . . . . 59

2.1.2 Finite Diﬀerence Approximations . . . . . . . . . . . . . . 61

2.2 Series Solutions of LODEs . . . . . . . . . . . . . . . . . . . . . . 65

2.2.1 Jennifer Renews an Old Acquaintance . . . . . . . . . . . 65

2.2.2 Another Old Acquaintance . . . . . . . . . . . . . . . . . 68

2.3 Fourier Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72

2.3.1 Madeiran Levadas and the Gibb’s Phenomenon . . . . . . 74

2.3.2 Sine or Cosine Series? . . . . . . . . . . . . . . . . . . . . 76

2.3.3 How Sweet This Is! . . . . . . . . . . . . . . . . . . . . . . 78

2.4 Summing Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80

2.4.1 I. M. Curious Sums a Series . . . . . . . . . . . . . . . . . 80

2.4.2 Spiegel’s Series Problem . . . . . . . . . . . . . . . . . . . 82

2.5 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 84

02-S01 Euler and Bernoulli Numbers . . . . . . . . . . . . . . . . 84

02-S02 Ms. Curious Approximates an Integral . . . . . . . . . . . 84

02-S03 More Finite Diﬀerence Approximations . . . . . . . . . . 84

02-S04 Series Solution . . . . . . . . . . . . . . . . . . . . . . . . 85

02-S05 Chebyshev Polynomials Revisited . . . . . . . . . . . . . . 85

02-S06 A Fourier Series . . . . . . . . . . . . . . . . . . . . . . . 85

02-S07 Fourier Sine Series . . . . . . . . . . . . . . . . . . . . . . 85

02-S08 Fourier Cosine Series . . . . . . . . . . . . . . . . . . . . . 85

02-S09 Legendre Series . . . . . . . . . . . . . . . . . . . . . . . . 86

02-S10 Directly Evaluating Series Sums . . . . . . . . . . . . . . 86

02-S11 Another Cosine Series . . . . . . . . . . . . . . . . . . . . 86

02-S12 The Complex Series Trick Again . . . . . . . . . . . . . . 86

3 Vectors and Matrices

87

3.1 Vectors: Cartesian Coordinates . . . . . . . . . . . . . . . . . . . 87

3.1.1 Bobby Blowﬂy . . . . . . . . . . . . . . . . . . . . . . . . 88

3.1.2 Hiking in the Southern Chilkotin . . . . . . . . . . . . . . 90

3.1.3 Establishing These Identities is Easy . . . . . . . . . . . . 94

CONTENTS

ix

3.1.4 This Task is Not a Chore . . . . . . . . . . . . . . . . . . 95 3.2 Vectors: Curvilinear Coordinates . . . . . . . . . . . . . . . . . . 98
3.2.1 From Scale Factors to Vector Operators . . . . . . . . . . 98 3.2.2 Vector Operators the Easy Way . . . . . . . . . . . . . . . 100 3.2.3 These Operators Do Not Have an Identity Crisis . . . . . 102 3.2.4 Is This Vector Field Conservative? . . . . . . . . . . . . . 103 3.2.5 The Divergence Theorem . . . . . . . . . . . . . . . . . . 105 3.3 Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 3.3.1 Some Matrix Basics . . . . . . . . . . . . . . . . . . . . . 109 3.3.2 Eigenvalues and Eigenvectors . . . . . . . . . . . . . . . . 111 3.3.3 Diagonalizing a Matrix . . . . . . . . . . . . . . . . . . . . 115 3.3.4 Orthogonal and Unitary Matrices . . . . . . . . . . . . . . 117 3.3.5 Introducing the Euler Angles . . . . . . . . . . . . . . . . 119 3.4 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 122 03-S01 Bobby Blowﬂy Seeks a Warmer Clime . . . . . . . . . . . 122 03-S02 Jennifer’s Vector Assignment . . . . . . . . . . . . . . . . 122 03-S03 Another Vector Operator Identity . . . . . . . . . . . . . 123 03-S04 Another Maple Approach . . . . . . . . . . . . . . . . . . 123 03-S05 Conservative or Non-conservative? . . . . . . . . . . . . . 123 03-S06 Basic Matrix Operations . . . . . . . . . . . . . . . . . . . 123 03-S07 The Cayley–Hamilton Theorem . . . . . . . . . . . . . . . 123 03-S08 Simultaneous Diagonalization . . . . . . . . . . . . . . . . 124 03-S09 Orthonormal Vectors . . . . . . . . . . . . . . . . . . . . . 124 03-S10 Stokes’s Theorem . . . . . . . . . . . . . . . . . . . . . . . 124 03-S11 Solving Linear Equation Systems . . . . . . . . . . . . . . 124

II THE ENTREES

125

4 Linear PDEs of Physics

127

4.1 Three Cheers for the String . . . . . . . . . . . . . . . . . . . . . 128

4.1.1 Jennifer Finds the General Solution . . . . . . . . . . . . 128

4.1.2 Daniel Separates Strings: I Separate Variables . . . . . . 130

4.1.3 Daniel Strikes Again: Mr. Fourier Reappears . . . . . . . 133

4.1.4 The 3-Piece String . . . . . . . . . . . . . . . . . . . . . . 135

4.1.5 Encore? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137

4.2 Beyond the String . . . . . . . . . . . . . . . . . . . . . . . . . . 141

4.2.1 Heaviside’s Telegraph Equation . . . . . . . . . . . . . . . 141

4.2.2 Spiegel’s Diﬀusion Problems . . . . . . . . . . . . . . . . . 143

4.2.3 Introducing Laplace’s Equation . . . . . . . . . . . . . . . 146

4.2.4 Grandpa’s “Trampoline” . . . . . . . . . . . . . . . . . . . 148

4.2.5 Irma Insect’s Isotherm . . . . . . . . . . . . . . . . . . . . 150

4.2.6 Daniel Hits Middle C . . . . . . . . . . . . . . . . . . . . 152

4.2.7 A Poisson Recipe . . . . . . . . . . . . . . . . . . . . . . . 155

4.3 Beyond Cartesian Coordinates . . . . . . . . . . . . . . . . . . . 158

x

CONTENTS

4.3.1 Is It Separable? . . . . . . . . . . . . . . . . . . . . . . . . 158 4.3.2 A Shell Problem, Not a Shell Game . . . . . . . . . . . . 162 4.3.3 The Little Drummer Boy . . . . . . . . . . . . . . . . . . 166 4.3.4 The Cannon Ball . . . . . . . . . . . . . . . . . . . . . . . 169 4.3.5 Variation on a Split-sphere Potential . . . . . . . . . . . . 171 4.3.6 Another Poisson Recipe . . . . . . . . . . . . . . . . . . . 174 4.4 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 178 04-S01 General Solutions . . . . . . . . . . . . . . . . . . . . . . . 178 04-S02 Balalaika Blues . . . . . . . . . . . . . . . . . . . . . . . . 179 04-S03 Damped Oscillations . . . . . . . . . . . . . . . . . . . . . 179 04-S04 Kids Will Be Kids . . . . . . . . . . . . . . . . . . . . . . 179 04-S05 Energy of a Vibrating String . . . . . . . . . . . . . . . . 179 04-S06 Vibrations of a Tapered String . . . . . . . . . . . . . . . 180 04-S07 Green Function for Forced Vibrations . . . . . . . . . . . 180 04-S08 Plane-wave Propagation in a 5-Piece String . . . . . . . . 180 04-S09 Transverse Vibrations of a Whirling String . . . . . . . . 180 04-S10 Newton Would Think That This Recipe Is Cool . . . . . . 181 04-S11 Locomotive on a Bridge . . . . . . . . . . . . . . . . . . . 181 04-S12 The Temperature Switch . . . . . . . . . . . . . . . . . . 181 04-S13 Telegraph Equation Revisited . . . . . . . . . . . . . . . . 181 04-S14 Another “Trampoline” Example . . . . . . . . . . . . . . 182 04-S15 An Electrostatic Poisson Problem . . . . . . . . . . . . . 182 04-S16 SHE Does Not Want to Separate . . . . . . . . . . . . . . 182 04-S17 WE Can Separate . . . . . . . . . . . . . . . . . . . . . . 182 04-S18 The Stark Eﬀect . . . . . . . . . . . . . . . . . . . . . . . 183 04-S19 Annular Temperature Distribution . . . . . . . . . . . . . 183 04-S20 Split-boundary Temperature Problem . . . . . . . . . . . 183 04-S21 Fluid Flow Around a Sphere . . . . . . . . . . . . . . . . 183 04-S22 Sound of Music? . . . . . . . . . . . . . . . . . . . . . . . 183

5 Complex Variables

185

5.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185

5.1.1 Jennifer Tests Basics . . . . . . . . . . . . . . . . . . . . . 186

5.1.2 The Stream Function . . . . . . . . . . . . . . . . . . . . 188

5.2 Contour Integrals . . . . . . . . . . . . . . . . . . . . . . . . . . . 190

5.2.1 Jennifer Tests Cauchy’s Theorem . . . . . . . . . . . . . . 191

5.2.2 Cauchy’s Residue Theorem . . . . . . . . . . . . . . . . . 193

5.3 Deﬁnite Integrals . . . . . . . . . . . . . . . . . . . . . . . . . . . 196

5.3.1 Inﬁnite Limits . . . . . . . . . . . . . . . . . . . . . . . . 196

5.3.2 Poles on the Contour . . . . . . . . . . . . . . . . . . . . . 198

5.3.3 An Angular Integral . . . . . . . . . . . . . . . . . . . . . 201

5.3.4 A Branch Cut . . . . . . . . . . . . . . . . . . . . . . . . . 202

5.4 Laurent Expansion . . . . . . . . . . . . . . . . . . . . . . . . . . 205

5.4.1 Ms. Curious Meets Mr. Laurent . . . . . . . . . . . . . . 205

5.4.2 Converge or Diverge? . . . . . . . . . . . . . . . . . . . . 207

CONTENTS

xi

5.5 Conformal Mapping . . . . . . . . . . . . . . . . . . . . . . . . . 208 5.5.1 Field Around a Semi-inﬁnite Plate . . . . . . . . . . . . . 209 5.5.2 A Clever Transformation . . . . . . . . . . . . . . . . . . 212 5.5.3 Schwarz–Christoﬀel Transformation . . . . . . . . . . . . 216
5.6 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 218 05-S01 Roots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218 05-S02 Fluid Flow Around a Cylinder . . . . . . . . . . . . . . . 218 05-S03 Constructing f (z) . . . . . . . . . . . . . . . . . . . . . . 219 05-S04 Analytic or Non-analytic? . . . . . . . . . . . . . . . . . . 219 05-S05 A Contour Integral . . . . . . . . . . . . . . . . . . . . . . 219 05-S06 A Higher-order Pole . . . . . . . . . . . . . . . . . . . . . 219 05-S07 Another Angular Integral . . . . . . . . . . . . . . . . . . 219 05-S08 A Removable Singularity . . . . . . . . . . . . . . . . . . 219 05-S09 Another Contour Integral . . . . . . . . . . . . . . . . . . 219 05-S10 Fluid Flow & Electric Field Around a Plate . . . . . . . . 219 05-S11 Another Branch Cut . . . . . . . . . . . . . . . . . . . . . 220 05-S12 Laurent Expansion . . . . . . . . . . . . . . . . . . . . . . 220 05-S13 Capacitor Edge Eﬀects . . . . . . . . . . . . . . . . . . . . 220

6 Integral Transforms

221

6.1 Fourier Transforms . . . . . . . . . . . . . . . . . . . . . . . . . . 221

6.1.1 Some Fourier Transform Shapes . . . . . . . . . . . . . . 223

6.1.2 A Northern Weenie Roast . . . . . . . . . . . . . . . . . . 225

6.1.3 Turn Oﬀ the Boob Tube and Concentrate . . . . . . . . . 227

6.1.4 Diﬀusive Heat Flow . . . . . . . . . . . . . . . . . . . . . 230

6.1.5 Deja Vu . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232

6.2 Laplace Transforms . . . . . . . . . . . . . . . . . . . . . . . . . . 234

6.2.1 Jennifer Consults Mr. Spiegel . . . . . . . . . . . . . . . . 235

6.2.2 Jennifer’s Heat Diﬀusion Problem . . . . . . . . . . . . . 236

6.2.3 Daniel Strikes Yet Again: Mr. Laplace Appears . . . . . . 238

6.2.4 Inﬁnite-medium Green’s Function . . . . . . . . . . . . . 239

6.2.5 Our Field of Dreams . . . . . . . . . . . . . . . . . . . . . 241

6.3 Bromwich Integral and Contour Integration . . . . . . . . . . . . 243

6.3.1 Spiegel’s Transform Problem Revisited . . . . . . . . . . . 245

6.3.2 Ms. Curious’s Branch Point . . . . . . . . . . . . . . . . . 246

6.3.3 Cooling That Weenie Rod . . . . . . . . . . . . . . . . . . 249

6.4 Other Transforms . . . . . . . . . . . . . . . . . . . . . . . . . . . 252

6.4.1 Meet the Hankel Transform . . . . . . . . . . . . . . . . . 253

6.5 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 255

06-S01 Verifying the Convolution Theorem . . . . . . . . . . . . . 255

06-S02 Bandwidth Theorem . . . . . . . . . . . . . . . . . . . . . 255

06-S03 Solving an Integral Equation . . . . . . . . . . . . . . . . 255

06-S04 Verifying Parseval’s Theorem . . . . . . . . . . . . . . . . 255

06-S05 Heat Diﬀusion in a Copper Rod . . . . . . . . . . . . . . 255

06-S06 Solving Another Integral Equation . . . . . . . . . . . . . 255

xii

CONTENTS

06-S07 Free Vibrations of an Inﬁnite Beam . . . . . . . . . . . . 256 06-S08 A Potential Problem . . . . . . . . . . . . . . . . . . . . . 256 06-S09 Solving an ODE . . . . . . . . . . . . . . . . . . . . . . . 256 06-S10 Impulsive Force . . . . . . . . . . . . . . . . . . . . . . . . 256 06-S11 Bromwich Integral . . . . . . . . . . . . . . . . . . . . . . 256 06-S12 Branch Point . . . . . . . . . . . . . . . . . . . . . . . . . 256

7 Calculus of Variations

257

7.1 Euler–Lagrange Equation . . . . . . . . . . . . . . . . . . . . . . 257

7.1.1 Betsy’s In A Hurry . . . . . . . . . . . . . . . . . . . . . . 257

7.1.2 Fermat’s Principle . . . . . . . . . . . . . . . . . . . . . . 262

7.1.3 Betsy’s Other Path . . . . . . . . . . . . . . . . . . . . . . 264

7.2 Subsidiary Conditions . . . . . . . . . . . . . . . . . . . . . . . . 267

7.2.1 Ground State Energy . . . . . . . . . . . . . . . . . . . . 267

7.2.2 Erehwon Hydro Line . . . . . . . . . . . . . . . . . . . . . 269

7.3 Lagrange’s Equations . . . . . . . . . . . . . . . . . . . . . . . . . 272

7.3.1 Daniel’s Chaotic Pendulum . . . . . . . . . . . . . . . . . 273

7.3.2 Van Allen Belts . . . . . . . . . . . . . . . . . . . . . . . . 275

7.4 Rayleigh–Ritz Method . . . . . . . . . . . . . . . . . . . . . . . . 279

7.4.1 I. M. Estimates a Bessel Zero . . . . . . . . . . . . . . . . 280

7.4.2 I. M. Estimates the Ground State Energy . . . . . . . . . 283

7.5 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 286

07-S01 Geodesic . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286

07-S02 Laws of Geometrical Optics . . . . . . . . . . . . . . . . . 286

07-S03 Bending of Starlight . . . . . . . . . . . . . . . . . . . . . 286

07-S04 Another Refractive Index . . . . . . . . . . . . . . . . . . 286

07-S05 Mirage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286

07-S06 A Constrained Extremum . . . . . . . . . . . . . . . . . . 287

07-S07 Maximum Volume . . . . . . . . . . . . . . . . . . . . . . 287

07-S08 Eigenvalue Estimate . . . . . . . . . . . . . . . . . . . . . 287

07-S09 Surface of Revolution . . . . . . . . . . . . . . . . . . . . 287

07-S10 Dido Wasn’t a Dodo . . . . . . . . . . . . . . . . . . . . . 287

07-S11 Another Approach to the String Equation . . . . . . . . . 287

07-S12 Betsy Bug’s Ride . . . . . . . . . . . . . . . . . . . . . . . 288

III THE DESSERTS

289

8 NLODEs & PDEs of Physics

291

8.1 Nonlinear ODEs: Exact Methods . . . . . . . . . . . . . . . . . . 291

8.1.1 Jacob Bernoulli and the Nonlinear Diode . . . . . . . . . 291

8.1.2 The Chase . . . . . . . . . . . . . . . . . . . . . . . . . . 294

8.1.3 Not As Hard As It Seems . . . . . . . . . . . . . . . . . . 297

8.2 Nonlinear ODEs: Graphical Methods . . . . . . . . . . . . . . . . 300

8.2.1 Joe and the Van der Pol Scroll . . . . . . . . . . . . . . . 300

CONTENTS

xiii

8.2.2 Squid Munch (Slurp?) Herring . . . . . . . . . . . . . . . 303 8.3 Nonlinear ODEs: Approximate Methods . . . . . . . . . . . . . . 309
8.3.1 Poisson’s Method Isn’t Fishy . . . . . . . . . . . . . . . . 309 8.3.2 Lindstedt Saves the Day . . . . . . . . . . . . . . . . . . . 312 8.3.3 Krylov–Bogoliubov Have A Say . . . . . . . . . . . . . . . 316 8.3.4 A Ritzy Approach . . . . . . . . . . . . . . . . . . . . . . 318 8.4 Nonlinear PDEs . . . . . . . . . . . . . . . . . . . . . . . . . . . 321 8.4.1 John Scott Russell’s Chance Interview . . . . . . . . . . . 321 8.4.2 There is a Similarity . . . . . . . . . . . . . . . . . . . . . 324 8.4.3 Creating Something Out Of Nothing . . . . . . . . . . . . 328 8.4.4 Portrait of a Nerve Impulse . . . . . . . . . . . . . . . . . 330 8.5 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 333 08-S01 A Bunch of Bernoulli equations . . . . . . . . . . . . . . . 333 08-S02 Introducing the Riccati Equation . . . . . . . . . . . . . . 333 08-S03 Period of the Plane Pendulum . . . . . . . . . . . . . . . 334 08-S04 The Child–Langmuir Law . . . . . . . . . . . . . . . . . . 334 08-S05 Soft Spring . . . . . . . . . . . . . . . . . . . . . . . . . . 334 08-S06 Gnits vs. Gnots . . . . . . . . . . . . . . . . . . . . . . . 334 08-S07 The Vibrating Eardrum . . . . . . . . . . . . . . . . . . . 335 08-S08 Van der Pol Transient Growth . . . . . . . . . . . . . . . 335 08-S09 Another Ritzy Solution . . . . . . . . . . . . . . . . . . . 335 08-S10 Portrait of a Dark Soliton . . . . . . . . . . . . . . . . . . 335 08-S11 Bright Soliton Solution . . . . . . . . . . . . . . . . . . . 336

9 Numerical Methods

337

9.1 Ordinary Diﬀerential Equations . . . . . . . . . . . . . . . . . . . 337

9.1.1 Joe’s Problem Revisited . . . . . . . . . . . . . . . . . . . 338

9.1.2 Survival of the Fittest . . . . . . . . . . . . . . . . . . . . 340

9.1.3 A Chemical Reaction . . . . . . . . . . . . . . . . . . . . . 343

9.1.4 Parametric Excitation . . . . . . . . . . . . . . . . . . . . 346

9.1.5 A Stiﬀ System . . . . . . . . . . . . . . . . . . . . . . . . 348

9.1.6 A Strange Attractor . . . . . . . . . . . . . . . . . . . . . 351

9.2 Partial Diﬀerential Equations . . . . . . . . . . . . . . . . . . . . 353

9.2.1 Steady-State Temperature Distribution . . . . . . . . . . 354

9.2.2 1-Dimensional Heat Flow . . . . . . . . . . . . . . . . . . 356

9.2.3 Von Neumann Stability Analysis . . . . . . . . . . . . . . 359

9.2.4 Sometimes It Pays to be Backwards . . . . . . . . . . . . 361

9.2.5 Daniel Still Separates, I Now Iterate . . . . . . . . . . . . 363

9.2.6 Interacting Laser Beams . . . . . . . . . . . . . . . . . . . 365

9.2.7 KdV Solitons . . . . . . . . . . . . . . . . . . . . . . . . . 368

9.3 Supplementary Recipes . . . . . . . . . . . . . . . . . . . . . . . 370

09-S01 White Dwarf Equation . . . . . . . . . . . . . . . . . . . . 370

09-S02 Spruce Budworm Infestation . . . . . . . . . . . . . . . . 371

09-S03 A Math Example . . . . . . . . . . . . . . . . . . . . . . . 371

09-S04 Hermione Hippo . . . . . . . . . . . . . . . . . . . . . . . 371

xiv

CONTENTS

09-S05 The Oregonator . . . . . . . . . . . . . . . . . . . . . . . 371 09-S06 Lorenz’s Butterﬂy . . . . . . . . . . . . . . . . . . . . . . 372 09-S07 A Stiﬀ Harmonic Oscillator . . . . . . . . . . . . . . . . . 372 09-S08 Courant Stability Condition . . . . . . . . . . . . . . . . . 372 09-S09 Poisson’s Equation . . . . . . . . . . . . . . . . . . . . . . 372 09-S10 Crank–Nicolson Method . . . . . . . . . . . . . . . . . . . 372 09-S11 Klein–Gordon Equation . . . . . . . . . . . . . . . . . . . 373

Bibliography

375

Index

379

Computer Algebra Recipes for Mathematical Physics

INTRODUCTION
The purpose of computing is insight, not numbers. R.W. Hamming, Numerical Methods for Scientists and Engineers (1973)
Science means simply the aggregate of all the recipes that are always successful. Paul Val´ery, French poet and essayist (1871–1945)
A. Computer Algebra Systems
Computer algebra systems (CASs) are revolutionizing the way we learn and teach those scientiﬁc subjects which make extensive use of advanced mathematics. CASs not only allow us to carry out the numerical computations of standard programming languages and to plot the results in a wide variety of ways, but to also perform lengthy and complicated symbolic mathematical manipulations as well. The purpose of this text is to show how a CAS can be used to tackle problem-solving and exploration of concepts and methods in mathematical physics. A CAS can perform a wide variety of mathematical operations, including
• analytic diﬀerentiation and analytic/numerical integration,
• analytic/numerical solution of ordinary/partial diﬀerential equations,
• Taylor/Laurent series expansions of functions,
• manipulation and simpliﬁcation of algebraic expressions,
• analytic/numerical solution of algebraic equations,
• production of 2- and 3-dimensional vector ﬁeld and contour plots,
• animation of analytic and numerical solutions. The computer algebra worksheets, or recipes, in this book are based on the powerful Maple 9.5 software system. Any reader desiring to use a diﬀerent release of Maple, or even an alternate CAS, should generally have little diﬃculty in modifying the recipes to his or her own taste. This is because the Maple input and output is completely annotated for each recipe and the underlying mathematics and physics fully explained.

2
B. Computer Algebra Recipes

INTRODUCTION

The heart of this text consists of a systematic collection of computer algebra recipes which have been designed to illustrate the concepts and methods of mathematical physics and to stimulate the reader’s intellect and imagination. Associated with each recipe is an intrinsically important mathematical physics example and, where feasible, the example is presented in a “story” format wherein real or ﬁctitious characters motivate or explain the recipe.
Every topic or story in the text contains the Maple code or recipe to explore that particular topic. To make life easier for you, all recipes have been placed on the CD-ROM enclosed within the back cover of this text. The recipes are ordered according to the chapter number, the section number, and the subsection (story) number. For example, the recipe 01-1-2, entitled The Tale of the Turbulent Tail, is associated with chapter 1, section 1, subsection 2. Although the recipes can be directly accessed on the CD by clicking on the appropriate worksheet number, it is strongly recommended that you access them through the hyperlinked recipe index ﬁle 00recipe, which provides complete instructions. The computer code exported into the text is accompanied by detailed explanations of the underlying mathematical physics concepts and/or methods and what the recipe is trying to accomplish.
The recommended procedure for using this text is ﬁrst to read a given topic/story for overall understanding and enjoyment. If you are having any diﬃculty in understanding a piece of the text code, then you should execute the corresponding Maple worksheet and try variations on the code. Keep in mind that the same objective may often be achieved by a diﬀerent combination of Maple commands than those that I chose. After reading the topic, you should execute the worksheet (if you have not already done so) to make sure the code works as expected. At this point feel free to explore the topic. Try rotating any three-dimensional graphs or running any animations in the ﬁle. See what happens when changes in the model or Maple code are made and then try to interpret any new results. This book is intended to be open-ended and merely serve as a guide to what is possible in mathematical physics using a CAS, the possibilities being limited only by your own background and desires.
At the end of each chapter, Supplementary Recipes are presented in the form of problems, their fully annotated solutions (recipes) being included on the CD. These recipes are also hyperlinked to the recipe index ﬁle with a simple numbering system. For example, 01-S02 is the second supplementary recipe in Chapter 1. Supplementary recipes can be used in two diﬀerent ways. They can be regarded as problems to be solved by using the mathematical physics concepts and computer algebra techniques presented in the main text recipes. Your solutions can then be compared with those that I have presented. Even if you are successful, you probably will be interested in the many little computer algebra features that are introduced in my solutions. On the other hand, these additional recipes can be regarded as still more interesting applications of computer algebra to mathematical physics. Enjoy exploring all the recipes!

MAPLE HELP

3

C. Maple Help
In this text, the Maple commands are introduced on a need-to-know basis. If you wish to learn more about these commands, or about other possible commands which might prove useful in solving a particular mathematical physics problem, Maple’s Help should be consulted. The Help system allows you to explore Maple commands and features, listed by name or subject. One can search by topic or carry out a full text search. Both procedures are illustrated by ﬁrst using the Topic Search to ﬁnd the correct form of the command for taking a square root, and then using the Full Text Search to ﬁnd the command for analytically solving an ODE. In either case, begin by using the mouse and clicking on Maple’s Help which opens a help window.
(a) Topic Search
• Click on Topic Search. Auto-search should then be selected. • You wish to ﬁnd the Maple command for taking the square root.
Depending on the programming language, the command could be sqr, sqrt, root, ...In this case type sq in the Topic box. Maple will display all the commands starting with sq. Double click on sqrt or, alternately, single click on sqrt and then on OK. A description of the square root command will appear on the computer screen.
(b) Full Text Search
• Click on Full Text Search. • Type ode in the Word(s) box and click on Search. • Double click on dsolve. A description of the dsolve command for
solving ODEs will appear along with several examples as well as hyperlinks to related topics.
To learn more about these search methods as well as other features of Maple’s help, open Using Help on the help page.
If on executing a Maple command, the output yields a mathematical function that is unfamiliar to you, e.g., EllipticF , you may ﬁnd out what this function is by clicking on the word to highlight it, then on Help, and ﬁnally on Help on EllipticF. You will ﬁnd that EllipticF refers to the incomplete elliptic integral of the ﬁrst kind, which is deﬁned in the Help page. The same Help window may also be opened by typing in a question mark followed by the word and a semicolon, e.g., ?EllipticF;
Maple’s Help is not perfect and on occasion you might feel frustrated, but generally it is helpful and should be consulted whenever you get stuck with Maple syntax or are seeking just the right command to accomplish a certain mathematical task. Maple learning and programming guides are also available ([Cha03], [MGH+03b], [MGH+03a]). Let us emphasize that in this book we will merely scratch the surface of what can be done with the Maple symbolic computing package, concentrating on those features which are relevant to tackling mathematical physics problems.

4

INTRODUCTION

D. Introductory Recipes

In the following chapters, recipes will be presented which correlate with the major topics developed in standard undergraduate mathematical physics ([MW71], [Boa83], [AW00]) texts. To give you a preliminary idea of what these recipes will look like and to introduce some basic Maple syntax, consider the following two kinematics examples. These introductory recipes are not on the accompanying CD-ROM, so after reading the following subsections you should open up Maple and type the recipes in and execute them.
D.1 A Dangerous Ride?
A horse is dangerous at both ends and uncomfortable in the middle. Ian Fleming, British mystery writer, (1908–64)

The vertical is given by Y

displacement (in meters) = a t2 e−b t cos(c t)/(1 + d

√of a t).

proposed circus ride at t seconds a, b, c, and d are real constants.

(a) Determine the velocity V and acceleration A at arbitrary time t.
(b) Given a = 2 m/s2, b = 3/8 s−1, c = 10 s−1, and d = 1 s−1/2, plot V over the time interval t = 0 to T = 20 seconds.

(c) Find the maximum V in m/s and km/h and the time at which it occurs.

(d) Plot A and V together from t = 0 to T /2 = 10 seconds and discuss the graph. Do you think that this proposed ride is dangerous? If so adjust the parameter values to make the ride safer.

To solve this problem, let’s ﬁrst clear Maple’s internal memory of any previously assigned values (other worksheets may be open with numerical values given to some of the same symbols being used in the present recipe). This is done by typing in the restart command after the opening prompt ( >) symbol, ending the command with a colon (:), and pressing Enter (which generates a new prompt symbol) on the computer key board.
> restart: All Maple command lines must be ended with either a colon, which suppresses any output, or a semi-colon (;), which allows the output to be viewed.
The analytic form of the ride’s vertical coordinate Y is entered.
> Y:=a*tˆ2*exp(-b*t)*cos(c*t)/(1+d*sqrt(t));
Y := a t2 e(−b t) √cos(c t) 1+d t
Use has been made of the assignment (:=) operator, placing Y on the left-hand side (lhs) of the operator and the time-dependent form of Y on the right-hand side (rhs). Assigned quantities can be mathematically manipulated. The symbols *, /, +, -, and ˆ are used for multiplication, division, addition, subtraction, and exponentiation, The Maple forms cos and exp of the cosine and exponential commands are intuitively obvious.

INTRODUCTORY RECIPES

5

Diﬀerentiating Y once with respect to t yields the velocity V , > V:=diff(Y,t);

V := 2 a t e(−b t)√cos(c t) − a t2 b e(−b t)√cos(c t) − a t2 e(−b t) s√in(c t) c

1+d t

1+d t

1+d t

− 1 a t(3/2) e(−b t√) cos(c t) d

2

(1 + d t)2

while diﬀerentiating twice yields the acceleration A.

> A:=diff(Y,t,t);

A := 2 a e(−b t) c√os(c t) − 4 a t b e(−b t)√cos(c t) − 4 a t e(−b t) s√in(c t) c

−

7

a

√1 t+e(d−b

t
t)

√cos(c

t)

d

+

1+d a t2 b2

t e(−b t√) cos(c t)

1+d 2 a t2 +

t b e(−b t)√sin(c t) c

4 (1 + d t)2

1+d t

1+d t

+ a t(3/2) b e(−b√t) cos(c t) d − a t2 e(−b t) co√s(c t) c2

(1 + d t)2

1+d t

a t(3/2) +

e(−b t)√sin(c t) c d

+

1

a t e(−b t)

co√s(c t) d2

(1 + d t)2

2 (1 + d t)3

The form of A would be tedious to derive by hand. With Maple, the calculation is done quickly and without any errors. If the structure of Y is changed, the new forms of V and A are obtained almost immediately by re-executing the above command lines.

The given parameter values are entered. Although not necessary, I like to leave spaces between commands on the same prompt line for easier readability.

> a:=2: b:=3/8: c:=10: d:=1: T:=20: The velocity is plotted over the time interval t = 0 to T and shown in Figure 1.

> plot(V,t=0..T);

20 10
0 –10 –20

2 4 6 8 10 12 14 16 t 18 20

Figure 1: Velocity V (vertical axis) versus time t.

6

INTRODUCTION

By inspecting the ﬁgure, we can see that the maximum velocity occurs around the 5 s mark and is about 24 m/s. A slightly more accurate estimate can be obtained by placing the cursor on the top of the tallest peak in the computer picture and clicking the mouse. The horizontal and vertical coordinates of the cursor location are displayed in a small viewing box at the top left of the computer screen. A much more accurate answer follows on setting the acceleration A equal to zero and applying the ﬂoating point solve (fsolve) command in a time range which includes the tallest peak, say t = 4 to 6 s. This yields an answer T2 for the time to 10 digits, Maple’s default accuracy.

> T2:=fsolve(A=0,t=4..6); T2 := 4.868771376
The maximum velocity occurs at T2 4.87 seconds. Then, using the eval command to evaluate V at t = T2 ,

> Vmax:=eval(V,t=T2); Vmax := 23.81789390
yields a maximum velocity Vmax 23.8 m/s. The convert command with the units option is used to convert Vmax from m/s to km/h.

> Vmax:=convert(Vmax,units,m/s,km/h);

Vmax := 85.74441804

The

maximum

velocity

is

85

3 4

km/h,

which

doesn’t

seem

excessively

high.

What about the acceleration? Let’s plot A and V together in the same ﬁgure

over the time range t = 0 to T /2 = 10 seconds. Two plot options (color and linestyle) are introduced. A red solid line is chosen for V , a blue dashed line for A. Note that V and A as well as the options have been entered as “Maple lists” (the elements separated by commas and enclosed in square brackets).

Maple preserves the order and repetition of elements in a list.

> plot([V,A],t=0..T/2,color=[red,blue],linestyle=[SOLID,DASH]);

200 100

0 –100 –200

2

4

6

8

10

t

Figure 2: A (dashed curve) and V (solid) versus time t.

INTRODUCTORY RECIPES

7

If you are printing pictures with multiple plots in black and white, it is particularly important to control the line style so the curves can be distinguished.
In Figure 2, we can clearly see that the acceleration is a maximum when the velocity is zero and zero when the velocity is a maximum. The maximum acceleration is over 200 m/s2. Since the acceleration due to gravity is about 10 m/s2, this corresponds to roughly 20 “Gees”. Do you think that such an acceleration is possibly dangerous? Justify your answer. Perhaps, do an Internet search on the eﬀects of rapid acceleration on the human body.
Next, we look at a two-dimensional kinematics example which introduces you to the use of a Maple library package. Library packages are very important because they save you the eﬀort of programming specialized plotting and mathematical operations. Approximately 90% of Maple’s mathematical knowledge resides in the Maple library. Most of the recipes in this text use one or more library packages.

D.2 The Patrol Route of Bertie Bumblebee
Belief like any other moving body follows the path of least resistance. Samuel Butler, British author, (1835–1902)

Bertie Bumblebee, intrepid sentry for the central bee hive on the terraformed planet Erehwon1, ﬂies on a patrol route described t minutes after leaving the central hive by the radial coordinate r(t) = a t2 e−b t/(1 + t2) sretem (a unit of length on Erehwon) and the angular coordinate θ(t) = b + c t2/3 radians. a, b, and c are real constants.
(a) Calculate Bertie’s speed V at an arbitrary time t, simplifying the result as much as possible. Attempt to analytically determine the distance Bertie travels in the time interval t = 0 to an arbitrary time T > 0.

(b) Taking a = 3, b = π/8 and c = 10, determine the time it takes for Bertie to make a complete circuit and the total distance ﬂown.

(c) Plot Bertie’s path for the complete circuit and superimpose an animation of his motion on this path, representing Bertie as a moving circle.

After clearing Maple’s memory with the restart command, > restart:
Bertie’s radial and angular coordinates are entered.

> r:=a*tˆ2*exp(-b*t)/(1+tˆ2); theta:=b+c*tˆ(2/3);

a t2 e(−b t) r := 1 + t2

θ := b + c t(2/3)

1In 1872, the British writer Samuel Butler described a ﬁctitious land in the utopian novel Erewhon, the title being intended as an anagram for nowhere. In this land, the people dealt with disease as a crime and destroyed machinery lest machines destroyed them. This would not be the land for using computer algebra, so in the Computer Algebra Recipes series, I have introduced a ﬁctitious planet, Erehwon, where names are occasionally spelled backwards, butErehwon is not backward in embracing modern technology.

8

INTRODUCTION

Note that entering theta for the angular coordinate has produced the Greek symbol θ in the output.
Next, Bertie’s Cartesian coordinates, X = r cos θ, Y = r sin θ, are calculated, the forms of r and θ being automatically substituted in the output.

> X:=r*cos(theta); Y:=r*sin(theta);

a t2 e(−b t) cos(b + c t(2/3))

X :=

1 + t2

a t2 e(−b t) sin(b + c t(2/3))

Y :=

1 + t2

The speed V at time t is obtained by calculating V = (dX/dt)2 + (dY /dt)2.

> V:=sqrt(diff(X,t)ˆ2+diff(Y,t)ˆ2);

2 a t e(−b t) cos(b + c t(2/3)) a t2 b e(−b t) cos(b + c t(2/3))

V := ((

1 + t2

−

1 + t2

−

2

a

t3

e(−b t) (1

cos(b + + t2)2

c

t(2/3))

−

2 3

a

t(5/3)

e(−b

t)
1

sin(b + t2

+

c

t(2/3))

c

)2

+

2 (

a

t

e(−b t) sin(b + 1 + t2

c

t(2/3))

−

a

t2

b

e(−b t) sin(b 1 + t2

+

c

t(2/3))

−

2 a t3 e(−b t) sin(b + c t(2/3)) (1 + t2)2

+

2 3

a

t(5/3)

e(−b

t) cos(b 1 + t2

+

c

t(2/3))

c

)2)(1/2)

The output looks quite messy, so let’s simplify it, making use of the simplify command. One of the major diﬃculties with simplify is that the output may not be simpliﬁed as much as you would like or not put into a speciﬁc form that you are trying to attain. The simplify command comes with various optional arguments, e.g., simplify(V,symbolic) as in the following command line, which simpliﬁes V assuming that all the parameters are positive.

> V:=simplify(V,symbolic);

V := 1 a t e(−b t)(36 − 36 b t − 36 t3 b + 9 t2 b2 + 18 t4 b2 + 9 t6 b2 3

+ 4 t(16/3) c2 + 8 t(10/3) c2 + 4 t(4/3) c2)(1/2) (1 + t2)2

This last result is certainly simpler than the previous one, all trig terms being

eliminated. Whether it’s the simplest possible form is a matter of taste. Sim-

plifying with Maple is usually a matter of trial and error and you will see many,

many simpliﬁcation examples as you progress through this book.

To determine the distance d that Bertie ﬂies over a time interval t = 0 to

some arbitrary time T , an attempt is made to analytically evaluate the integral

d=

T 0

V

dt

using

the

integration

(int)

command.

> d:=int(V,t=0..T);

d := T 1 a t e(−b t)(36 − 36 b t − 36 t3 b + 9 t2 b2 + 18 t4 b2 + 9 t6 b2 03
+ 4 t(16/3) c2 + 8 t(10/3) c2 + 4 t(4/3) c2)(1/2) (1 + t2)2dt

INTRODUCTORY RECIPES

9

Maple is unable to ﬁnd an analytic solution, returning the integral without evaluating it. So, let’s enter the given parameter values, a = 3, b = π/8, and c = 10. Note that the command Pi for entering π is capitalized. Maple is case sensitive here.
> a:=3: b:=Pi/8: c:=10: The time T = 12.99 minutes, which is now entered, is the approximate time for Bertie to complete one circuit. It is determined by trial and error by numerically calculating the total distance to 4 digits, using the ﬂoating point evaluation (evalf) command. Increasing T will not change the answer to this accuracy.
> T:=12.99; distance:=evalf(d,4);
T := 12.99 distance := 23.98 Bertie travels a total distance of about 24 sretem in one complete circuit.
To animate Bertie’s ﬂight and superimpose the motion on a plot of the entire route, special plots commands are required. These are contained in the plots library package, which is now “loaded”.
> with(plots); Warning, the name changecoords has been redeﬁned
[animate, animate3d , ... display, ... polarplot, ... textplot3d , tubeplot]
The with( ) command is used to load Maple library packages. Normally, I would place a colon on the above command line to suppress the output, but here a partial list of the large number of specialized plot commands that are available in the plots package is shown. The commands animate, polarplot (to plot the trajectory in polar coordinates), and display (to superimpose graphs) in the output list will be used here. There is also a warning message that the name changecoords has been redeﬁned. This warning appears even if a colon is used. If desired, warnings can be removed by using a colon and inserting the command interface(warnlevel=0) prior to loading the library package. From now one, I will generally artiﬁcially remove all such warnings in the text.
In the ﬁrst graph, gr1, an animation of Bertie’s motion is created with the animate command. To ﬁt into the width of the page, the lengthy Maple command line is broken over two text lines. Bertie’s X and Y coordinates are entered as a Maple list. The time range is taken from t = 0 to T . I have chosen to use 500 frames (the default is 25) to make a reasonably smooth animation. A point style is chosen, Bertie being represented by a size 16 blue circle. A line-ending colon is used to prevent the plotting numbers from being displayed.
> gr1:=animate([X,Y],t=0..T,frames=500,style=point, symbol=circle,color=blue,symbolsize=16):
The polarplot command is used in gr2 to graph the entire route as a thick (the default thickness is 0) orange line. To obtain a smooth curve, a minimum of 500 (the default is 50) plotting points is requested.
> gr2:=polarplot([r,theta,t=0..T],numpoints=500,style=line, color=orange,thickness=2):
The graphs are now superimposed with the display command, the axis labels

10

INTRODUCTION

x and y being added. The double quotes denote that each enclosed item is a “Maple string”. A string is a sequence of characters that has no value other than itself. It cannot be assigned to, and will always evaluate to itself.
> display([gr1,gr2],labels=["x","y"]);

1

y

–1

x1

–1
Figure 3: Bertie’s patrol route while on sentry duty.
Figure 3 shows the entire path traced out by Bertie and his position (represented by the small circle) two minutes after he starts on his patrol route. The animation can be initiated (the circle starts at the origin and moves along the path, stopping when t = T = 12.99 minutes.) by clicking on the computer plot and then on the start arrow in the Maple tool bar at the top of the computer screen. The animation may be made to repeat by clicking on the looped arrow and stopped by clicking on the solid square. Other options are also available.
E. How to Use this Text
Although some of Maple’s basic syntax has been provided in these introductory recipes, it is recommended that the computer algebra novice start at the beginning of the Appetizers, even if your mathematical physics background is above that of the recipes presented there. It is in these early chapters that more of the basic features of the Maple system are introduced. Further, you might be surprised at how even initially simple problems can be made more interesting and often much more challenging because of the fact that a computer algebra system is being used. Whatever approach you adopt to using this book, I hope that you savor the wide variety of mathematical physics recipes that follow.
Bon Appetit! Your computer algebra chef, Richard.

Part I
THE APPETIZERS
The last thing one discovers in composing a work is what to put ﬁrst.
Blaise Pascal, French scientist, philosopher (1623–62)
Each problem that I solved became a rule which served afterwards to solve other problems.
Ren´e Descartes, French philosopher and mathematician (1596–1650)
Food probably has a very great inﬂuence on the condition of men....Who knows if a well-prepared soup
was not responsible for the pneumatic pump or a poor one for a war?
G. C. Lichtenberg, German physicist, philosopher (1742–99)

Chapter 1

Linear ODEs of Physics

In this chapter, the recipes illustrate how Maple may be used to solve and explore some representative ordinary diﬀerential equations (ODEs) from the world of physics. The focus is on linear ODEs (LODEs), i.e., those which are ﬁrst order or linear in the dependent variable. Although an example of a nonlinear ODE (NLODE), i.e., one which contains one or more terms which are not linear in the dependent variable, is presented in the second recipe, the study of NLODEs is a much more mathematically challenging topic and will be postponed until the Desserts.
This chapter is not intended to teach you all the details of the wide variety of approaches for solving ODEs, but rather to show you how Maple can be used as an auxiliary tool to implement some of the more common methods. However, the series approach to solving an ODE will be postponed until Chapter 2.
As you are probably aware, the subject of solving diﬀerential equations (ordinary and partial) is huge. This is exempliﬁed by Daniel Zwillinger’s Handbook of Diﬀerential Equations [Zwi89] which is 700 pages long. This reference book is highly recommended for quickly looking up every known method of solution.

1.1 Linear ODEs with Constant Coeﬃcients

Consider an nth order LODE of the general structure (the spatial coordinate x being replaced by t for time-dependent problems),

dny

dn−1y

dy

dxn + an−1(x) dxn−1 + · · · + a1(x) dx + a0(x) y = f (x).

(1.1)

If f (x) = 0, the ODE is said to be homogeneous, otherwise it is nonhomogeneous. The ﬁrst ODEs that physics and engineering students usually encounter are diﬀerential equations with constant coeﬃcients (a0, etc., independent of x) which can be solved in closed form in terms of “elementary” (trigonometric, logarithmic, exponential) functions using a variety of standard methods. In this section, I will illustrate how Maple can be used to implement these methods, bypassing the tedious intermediate steps involved in a hand calculation.

14

CHAPTER 1. LINEAR ODES OF PHYSICS

1.1.1 Dazzling Dsolve Debuts
One should never make one’s debut with a scandal. One should reserve that to give an interest to one’s old age. Oscar Wilde, Anglo-Irish playwright, author, The Picture of Dorian Gray (1891)

Whether the coeﬃcients are constant or not, the dsolve command is dazzling in its ability to solve LODEs. Before we tackle some physical examples, this mathematical recipe brieﬂy looks at what is possible with dsolve.
> restart: Let’s begin with the general nonhomogeneous ﬁrst order LODE given in ode1 .
> ode1:=diff(y(x),x)+a(x)*y(x)=f(x); d
ode1 := ( y(x)) + a(x) y(x) = f (x) dx
A standard method for solving ode1 is to ﬁrst ﬁnd its integrating factor, IF . Loading the necessary DEtools package, the intfactor command yields IF .
> with(DEtools): IF:=intfactor(ode1);
IF := e( a(x) dx) The integral in IF is performed by specifying a(x), e.g., a(x) = a, a constant, and applying the value command to IF.
> a(x):=a: IF:=value(IF); IF := e(a x)
Multiplying ode1 by IF , the ﬁrst integral I1 is obtained by applying firint.
> I1:=firint(IF*ode1);

I1 := e(a x) y(x) − e(a x) f (x) dx + C1 = 0

Since the ODE is ﬁrst order, one arbitrary coeﬃcient C1 appears. To evaluate the integral in I1 , f (x) must be given. Suppose, e.g., that f (x) = e−x. Forming
value(I1), the ﬁrst integral is explicitly evaluated.

> f(x):=exp(-x): I1:=value(I1);

I1

:=

e(a x)

y (x)

−

e(a x−x) a−1

+

C1

=0

The general solution to ode1 , labeled y1 , follows on solving I1 for y(x).

> y1:=solve(I1,y(x));

y1

:=

−

−e(a

x−x) + C1 e(a x) (a −

a− 1)

C1

The above approach has mimicked the major steps of a hand calculation. The

same basic result can be obtained more quickly by applying dsolve to ode1 .

> dsolve(ode1,y(x));

e(x (a−1))

y(x) = (

+

C1 ) e(−a x)

a−1

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

15

A common ODE notation is to use primes, each prime ( ) standing for d/dx. If desired, this notation can be introduced into the ODE output by ﬁrst loading the PDEtools library package and entering the following declare command.
> with(PDEtools): declare(y(x),prime=x);
y(x ) will now be displayed as y, derivatives with respect to x of functions of one variable will now be displayed with
Then entering, say, the nonhomogeneous second-order linear ODE ode2 with constant coeﬃcients, produces an output with the prime notation.

> ode2:=diff(y(x),x,x)+a1*diff(y(x),x)+a0*y(x)=F(x); ode2 := y + a1 y + a0 y = F (x)
An ODE such as ode2 can be classiﬁed by applying the odeadvisor command.
> odeadvisor(ode2); [[ 2nd order , linear , nonhomogeneous]]
An even more important diagnostic tool is the infolevel[dsolve] command, which will give information on what methods are used in attempting to solve the ODE when dsolve is applied, even if unsuccessful. An integer between 1 and 5 must be speciﬁed, with generally more detailed information being provided as the number is increased. On applying the dsolve command to ode2 , the method of attack is summarized in the following output and, in this case, the general solution y(x) given with two arbitrary coeﬃcients C1 and C2 .

> infolevel[dsolve]:=5: dsolve(ode2,y(x));
Methods for second order ODEs: — Trying classiﬁcation methods — trying a quadrature trying high order exact linear fully integrable trying diﬀerential order: 2; linear nonhomogeneous with symmetry [0,1] trying a double symmetry of the form [xi=0, eta=F(x)] Try solving ﬁrst the homogeneous part of the ODE
−> Tackling the linear ODE “as given”: checking if the LODE has constant coeﬃcients <− constant coeﬃcients successful
<− successful solving of the linear ODE ”as given” −> Determining now a particular solution to the nonhomogeneous ODE
building a particular solution using variation of parameters particular solution has integrals (!) −> trying a d’Alembertian particular solution free of integrals <− no simpler d’Alembertian solution was found <− solving ﬁrst the homogeneous part of the ODE successful

16

CHAPTER 1. LINEAR ODES OF PHYSICS

√

√

y

=

e((−

a1 2

+

a1

2 −4 2

a0

)

x)

C2

+

e((−

a1 2

−

a1

2 −4 2

a0

)

x)

C1

√

+

e(− (−a1 +

a1 2

2 −4

a0

)

x

)

F

(x)

dx

e(x

√ a1

2 −4

a0

)

√

√

−

F (x) e( (a1 +

a1 2−4 2

a0

)

x

)

dx

e(− (a1 +

a1 2 2

−4

a0

)

x

)

a1 2 − 4 a0

The corresponding homogeneous ODE (set F (x) = 0) was ﬁrst solved and then
a particular solution obtained for F (x) = 0 using the variation of parameters method. The homogeneous solution is obtained by assuming that y ∼ eλ x. This yields λ2 + a1 λ + a0 = 0, which has two roots λ1 and λ2. So the general solution of the homogeneous ODE is of the form C1 eλ1 x + C2 eλ2 x, the speciﬁc forms
of λ1 and λ2 being easily identiﬁed from the above Maple output. The variation of parameters method then assumes that y(x) = C1(x) eλ1 x + C2(x) eλ2 x for
the complete LODE, and solves for the functions C1(x) and C2(x). See, for
example, [Ste87] for the details.
The infolevel[dsolve] command can be turned oﬀ by setting it to 0. The prime notation can also be turned oﬀ by entering the command OFF.

> infolevel[dsolve]:=0: OFF:
Boundary value and initial value problems are important in engineering and physics. As a simple example of the former, suppose, e.g., that a1 = 2, a0 = 3, and F (x) = x + sin(x) e−x. Then ode2 reduces to the form given in ode3 .

> a1:=2: a0:=3: F(x):=x+sin(x)*exp(-x): ode3:=ode2;

ode3

:=

d2 ( dx2

d y(x)) + 2 (
dx

y (x))

+ 3 y(x)

=

x+

sin(x) e(−x)

Suppose that the boundary conditions (bcs) are that y(0) = y(1) = 0. The

boundary value problem is solved for y(x) by entering the equation name and

bcs in the dsolve command as a “Maple set” (items enclosed in braces, { }).

Unlike a list, a set does not preserve order or repetition.

> dsolve({ode3,y(0)=0,y(1)=0},y(x));

y(x)

=

−1

e(−x)

√ sin( 2

x)

(2

√ cos√( 2)

+e

+ 9 sin(1))

+

2

e(−x)

√ cos( 2

x)

9

sin( 2)

9

+ 1 e(−x) (3 x ex − 2 ex + 9 sin(x)) 9
Now, an initial value problem is considered. First, let’s turn the declare
command back on and replace x with the time variable t in ode3 .

> ON: ode4:=subs(x=t,ode3); ode4 := yt, t + 2 yt + 3 y(t) = t + sin(t) e(−t)
Because the independent variable is no longer x, the output has used the notation yt and yt, t to indicate 1st and 2nd time derivatives. Now, suppose that

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

17

y(0) = 100 and yt(0) = 10. ode4 is now solved for y(t), subject to the initial conditions. The diﬀerential operator D is used to enter the derivative condition.

> dsolve({ode4,y(0)=100,D(y)(0)=10},y(t));

y (t)

=

490e(−t)

√ sin( 2

t)

√ 2+

902e(−t)

√ cos( 2

t)+

1e(−t)

(3

t

et

−

2

et

+9

sin(t))

9

9

9

To simplify y(t), the last output (indicated by %) must ﬁrst be assigned. If

this is not done, entering y(t) would generate the output y(t), not the above

answer. Then y(t) is (somewhat) simpliﬁed and assigned the name y4 .

> assign(%): y4:=simplify(y(t));

y4

:=

1

e(−t)

(490

√ sin( 2

t)

√ 2

√ + 902 cos( 2 t)

+ 3 t et

−

2 et

+ 9 sin(t))

9

ODE systems may also be solved with the dsolve command. Consider the

coupled ﬁrst-order time-dependent LODEs given in ode5a and ode5b.

> ode5a:=diff(x(t),t)=-3*x(t)+4*z(t)+(sin(t))ˆ2*exp(-2*t); ode5a := xt = −3 x (t) + 4 z (t) + sin(t)2 e(−2 t)

> ode5b:=diff(z(t),t)=2*z(t)-5*x(t)+(cos(t))ˆ3; ode5b := zt = 2 z (t) − 5 x (t) + cos(t)3
The set of ODEs, ode5a and ode5b, is solved for the set of unknown functions, x(t) and z(t), subject to the initial conditions x(0) = 100 and z(0) = 10.

> sol:=dsolve({ode5a,ode5b,x(0)=100,z(0)=10},{x(t),z(t)});
The solution sol , whose lengthy output has been suppressed here in the text, is assigned, and exponential terms collected in x(t) and z(t), the results being labeled X and Z, respectively.

> assign(sol): X:=collect(x(t),exp); Z:=collect(z(t),exp);

X:=

(− 57231

√ 55 t
sin( )

√ 55

+

203147

√ 55
cos(

t

))

e(−

t 2

)

7480

2

2040

2

+

1 (

cos(2

t)

−

1 ) e(−2 t)

+

39

cos(t) +

3

3

5

sin(t) + sin(3 t) + cos(3 t)

6

8

170

170

34

34

Z

:=

(

15727

cos(

√ 55

t

)

−

90973

sin(

√ 55

t )

√ 55)

e(−

t 2

)

−

3

sin(t)

1632

2

5280

2

68

+ 3 cos(t) + 3 cos(3 t) − 3 sin(3 t) + (− 1 sin(2 t) + 1 cos(2 t) − 5 ) e(−2 t)

17

17

68

12

6

32

If you are not already dazzled by the power of dsolve in obtaining the above result try, e.g., some other nonhomogeneous terms in the ODEs. Unlike with the hand calculation, a new answer can be rapidly and accurately generated.

To this point, we have had no control over the method of solution. As shall be demonstrated in some of the following recipes, various self-evident options can be included in dsolve, such as series, laplace, numeric, etc.

18

CHAPTER 1. LINEAR ODES OF PHYSICS

1.1.2 The Tale of the Turbulent Tail
Nonsense. Space is blue and birds ﬂy through it. Felix Bloch, 1952 Nobel laureate in physics, Heisenberg and the early days of quantum mechanics, Physics Today, December 1976

As a post-doctoral fellow at the Chadwick Laboratory at the University of Liverpool (England), I enjoyed my leisure time on dark, rainy, often foggy, winter nights playing badminton with my fellow physicists. The Tale of the Turbulent Tail is inspired by those games of badminton played so long ago.
In an article contained in a delightful reprint collection entitled The Physics of Sports [PLA92], Peastrel, Lynch and Armenti reported on their experimental investigation of the aerodynamics of a badminton shuttlecock or “bird” falling vertically from rest. The relevant data is reproduced in Table 1.1, the distance y in meters that the bird fell in t seconds being given.

Table 1.1: Data for the falling badminton bird.
t 0.347 0.470 0.519 0.582 0.650 0.674 0.717 0.766 y 0.61 1.00 1.22 1.52 1.83 2.00 2.13 2.44 t 0.823 0.870 1.031 1.193 1.354 1.501 1.726 1.873 y 2.74 3.00 4.00 5.00 6.00 7.00 8.50 9.50
From the last pair of entries in the table, Peastrel et al calculated the terminal velocity (occuring when the downward gravitational force balances the upward drag force due to air resistance) to be (9.50 − 8.50)/(1.873 − 1.726) = 6.8 m/s. The gravitational acceleration was taken to be g = 9.8 m/s2.
The investigators’ goal was to determine which law of air resistance could best account for the experimental data, Stokes’s law or Newton’s law. For the Stokes model, the drag force on a body of mass m moving with velocity v is given by FStokes = −a m v, while for the Newton model, FNewton = −b m |v| v. The positive coeﬃcients a and b can be related to the terminal velocity and g.
After loading the plots library package, I will begin this recipe by ﬁrst
> restart: with(plots): entering the experimental data of Table 1.1 so that the predictions of the two models can be tested for goodness of ﬁt. The data is entered as a “list of lists.” The ﬁrst entry in each list is the time, the second entry the distance.
> data:=[[0.347,0.61],[0.470,1.00],[0.519,1.22],[0.582,1.52], [0.650,1.83],[0.674,2.00],[0.717,2.13],[0.766,2.44], [0.823,2.74],[0.870,3.00],[1.031,4.00],[1.193,5.00], [1.354,6.00],[1.501,7.00],[1.726,8.50],[1.873,9.50]]:
Taking the gravitational force on the bird to be mg and assuming that Stokes’s law of air resistance prevails (a comment (preﬁxed by the sharp symbol #) to this eﬀect is added to the end of the command line), the acceleration of the bird is given by ode1 . This is a ﬁrst-order linear nonhomogeneous ODE.

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

19

> ode1:=diff(v(t),t)=g-a*v(t); #Stokes’s resistance law

ode1 := d v(t) = g − a v(t) dt
After a suﬃciently long time, the gravitational and drag forces will balance and
the bird will reach its terminal velocity V1 = g/a. So the unknown constant a
can be eliminated by substituting a = g/V1 into ode1 .

> ode1:=subs(a=g/V1,ode1);

ode1 := d v(t) = g − g v(t)

dt

V1

Since the bird falls from rest, the initial value problem is solved by entering

ode1 and the initial condition v(0) = 0 in the dsolve command as a Maple set.

> sol1:=dsolve({ode1,v(0)=0},v(t));

sol1

:=

v(t)

=

V1

−

e(−

gt V1

)

V1

To compare with the experimental data, we need to calculate the distance that

the bird falls in T seconds. For the Stokes model, this distance y1 is obtained

by integrating the right-hand side (rhs) of sol1 from t = 0 to T .

> y1:=int(rhs(sol1),t=0..T);

V1

(−V1

+

g

T

+

V1

e(−

gT V1

))

y1 :=

g

Let’s now look at Newton’s model of air resistance. Since the motion is

in one direction (down) only, the absolute value sign can be dropped, so that

FNewton = −b m v2. The acceleration of the bird is now given by ode2 . This is

a ﬁrst order nonlinear nonhomogeneous ODE.

> ode2:=diff(v(t),t)=g-b*v(t)ˆ2; #Newton’s resistance law

ode2 := d v(t) = g − b v(t)2 dt
The terminal velocity is now given by V2 = g/b. The unknown constant b is removed from the equation by substituting b = g/V2 2 into ode2 .

> ode2:=subs(b=g/V2ˆ2,ode2);

d

g v(t)2

ode2 := dt v(t) = g − V2 2

To see what methods are used in trying to solve ode2 , the infolevel[dsolve]

command is entered and set to 2. Applying the dsolve command to ode2 and

taking the rhs, an analytic solution v2 is generated for the velocity v(t).

> infolevel[dsolve]:=2: v2:=rhs(dsolve(ode2,v(t))); Methods for ﬁrst order ODEs: — Trying classiﬁcation methods — trying a quadrature trying 1st order linear trying Bernoulli trying separable

20

CHAPTER 1. LINEAR ODES OF PHYSICS

<− separable successful

v2

:=

2 V2

e(

2tg V2

+

2

C1 V2

g)

1

+

e(

2tg V2

+

2

C1 V2

g)

− V2

Maple has used the fact that ode2 is separable. A separable ([Ste87]) ﬁrst-order

nonlinear ODE can be written in the form dy/dx = g(x) f (y). It is solved by

separating variables and integrating, i.e., dy/f (y) = g(x) dx.

The arbitrary constant C1 is determined by evaluating v2 at t = 0, se√tting the result to 0, and solving for C1. On some executions, C1 involves I ≡ −1,

so to ensure a real velocity v2 , the complex evaluation command (evalc breaks a complex quantity into real and imaginary parts) is applied to v2 .

> _C1:=solve(eval(v2,t=0)=0,_C1); v2:=evalc(v2);

C1 := 0

2

V2

e(

2tg V2

)

v2 :=

1

+

e(

2tg V2

)

− V2

The distance y2 that the bird falls in T seconds, according to Newton’s model,

is now calculated by integrating v2 assuming that g > 0, V2 > 0, and T > 0.

> y2:=int(v2,t=0..T) assuming g>0,V2>0,T>0;

V2

(V2

ln(1

+

e(

2T g V2

))

−

g

T

−

V2

ln(2))

y2 :=

g

So, which is the better model equation, y1 or y2 ? Entering the values of g, V1 , and V2 , the forms of y1 and y2 are then as follows:

> g:=9.8: V1:=6.8: V2:=6.8: y1:=y1; y2:=evalf(y2);

y1 := −4.718367347 + 6.800000000 T + 4.718367347 e(−1.441176471 T )

y2 := −3.270523024 + 4.718367347 ln(1. + e(2.882352940 T )) − 6.800000000 T The experimental data is now plotted in gr1, the data points being represented by size 14 (red by default) circles.
> gr1:=plot(data,style=point,symbol=circle,symbolsize=14): The theoretical curves y1 and y2 are plotted in gr2 over the time interval T = 0 to 2 seconds. y1 is represented by a thick blue dashed line, y2 by a thick green solid line. The entry linestyle=[3,1] would produce the same line styles.
> gr2:=plot([y1,y2],T=0..2,color=[blue,green], linestyle=[DASH,SOLID],thickness=2):
The two graphs are then superimposed with the display command. The minimum number of tickmarks along the horizontal and vertical axes is speciﬁed, and axis labels and a title added.
> display({gr1,gr2},tickmarks=[4,3],labels=["t","y"],title= "Newton’s law (solid green), Stokes’s law (dashed blue)");
The resulting picture is shown in Figure 1.1. It is clear that Newton’s law of resistance is the correct model for the falling badminton bird. Stokes’s law is

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

21

Newton’s law (solid line), Stokes’s law (dashed line) 0

y 5

0

05

1 t 15

2

Figure 1.1: The experimental points agree with Newton’s resistance law.

known to apply to the laminar ﬂow of air about a smooth moving object, while Newton’s law applies to the turbulent ﬂow around a non-smooth body. It is the tail “feathers” of the moving badminton bird which create the turbulence.

1.1.3 This Bar Doesn’t Serve Drinks
By the time a bartender knows what drink a man will have before he orders, there is little else about him worth knowing. Don Marquis, American humorist and journalist, (1878–1937)

This recipe involves a bar undergoing rotational motion. No, I don’t mean that the local pub appears to be spinning because one has overindulged in liquid refreshments after a tough exam! It has to do with the possible deﬂection modes ([Mor48], [Hil57], [SR66]) of an originally straight uniform solid bar of length L which rotates in a horizontal plane about one end (say x = 0) with uniform angular velocity ω. Below a critical frequency ω1, the bar remains straight, but on exceeding ω1 it starts pulsating and its shape changes. On further increasing ω, another critical value ω2 is reached, above which the shape changes again, and so on. The values of the critical frequencies and the deﬂection modes depend on how the ends of the bar are supported. Here, I will consider one possibility, leaving it to you to explore other boundary conditions.
For small deﬂections y(x) from the straight shape, the governing 4th order LODE (each prime denoting an x derivative) is

y − k4y = 0, where k4 ≡ ω2/(Y I).

(1.2)

Here is the mass per unit length, Y is Young’s modulus, and I is the moment of inertia of a cross-section of the shaft about an axis perpendicular to the xy plane. To solve the boundary value problem, four boundary conditions are required for the homogeneous fourth-order equation, two conditions for each

22

CHAPTER 1. LINEAR ODES OF PHYSICS

end of the bar. I will consider the case when the pivot point at x = 0 is a clamped end (both y and the slope y vanish at x = 0), while x = L is a free end (both y (∝ bending moment) and y (∝ shearing force) vanish at x = L).
The recipe begins with the loading of the plots library package and the entry of the infolevel[dsolve] command. The PDE tools library is also accessed and the declare command used to generate the prime notation.
> restart: with(plots): infolevel[dsolve]:=2:
> with(PDEtools): declare(y(x),prime=x); The governing ODE (1.2) is entered. Instead of inputting the fourth derivative as diff(y(x),x,x,x,x), the short-cut entry diff(y(x),x$4) is used.
> ode:=diff(y(x),x$4)-kˆ4*y(x)=0;
ode := y − k4 y = 0 The general solution of ode is obtained using the dsolve command and the rhs of the result taken. Maple recognizes that ode is a LODE with constant coeﬃcients and makes use of this fact to solve the equation.
> y:=rhs(dsolve(ode,y(x))); Methods for high order ODEs: — Trying classiﬁcation methods — trying a quadrature checking if the LODE has constant coeﬃcients <− constant coeﬃcients successful y := C1 e(−k x) + C2 e(k x) + C3 sin(k x) + C4 cos(k x)
Clamped-end boundary conditions are applied at x = 0 in bc1 and bc2 , and free-end boundary conditions at x = L in bc3 and bc4 .
> bc1:=eval(y,x=0)=0; bc2:=eval(diff(y,x),x=0)=0;
bc1 := C1 + C2 + C4 = 0
bc2 := − C1 k + C2 k + C3 k = 0
> bc3:=eval(diff(y,x$2),x=L)=0; bc4:=eval(diff(y,x$3),x=L)=0;
bc3 := C1 k2 e(−k L) + C2 k2 e(k L) − C3 sin(k L) k2 − C4 cos(k L) k2 = 0
bc4 := − C1 k3 e(−k L) + C2 k3 e(k L) − C3 cos(k L) k3 + C4 sin(k L) k3 = 0 Applying the analytic solve command, the set of four boundary conditions are solved for the set of four unknown coeﬃcients. All the coeﬃcients are zero, which corresponds to the trivial solution y(x) = 0, i.e., the straight bar proﬁle.
> solve({bc1,bc2,bc3,bc4},{_C1,_C2,_C3,_C4});
{ C1 = 0, C4 = 0, C3 = 0, C2 = 0} To obtain a non-trivial result, let’s ﬁrst solve the set of three boundary conditions, bc1 , bc2 , and bc4 , for C1, C2, and C4 and assign the solution sol .
> sol:=solve({bc1,bc2,bc4},{_C1,_C2,_C4}); assign(sol): C1, C2, and C4 are automatically substituted into the remaining boundary condition, bc3 , which is divided by k2 and simpliﬁed.

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

23

> bc3:=simplify(bc3/kˆ2);

bc3

:= − 2

C3 (e(−k L) cos(k L) + 2 + e(k L) cos(k L)) e(−k L) − e(k L) + 2 sin(k L)

=0

For a non-trivial solution, C3 = 0, so the term containing cos(kL) must be

zero. The select command is used to extract this term from the lhs of bc3 .

> eq:=select(has,lhs(bc3),cos(k*L))=0;

eq := e(−k L) cos(k L) + 2 + e(k L) cos(k L) = 0 The expression eq is converted completely to trigonometric form and simpliﬁed.

> eq2:=simplify(convert(eq,trig)/2);

eq2 := cos(k L) cosh(k L) + 1 = 0 eq2 is a transcendental equation which must be solved numerically for k L. The algebraic substitution kL = K is now made in eq2 .

> eq3:=algsubs(k*L=K,eq2);

eq3 := cos(K) cosh(K) + 1 = 0 The lhs of eq3 is plotted in Figure 1.2, the viewing range being controlled.

> plot(lhs(eq3),K=0..12,thickness=2,view=[0..12,-5..5]);

4

0 –4

6K

12

Figure 1.2: Graphically locating the zeros of the transcendental equation.

The approximate values of the zeros of eq3 can be determined by visual inspection. A slightly more accurate procedure is to place the cursor on the zero on the computer screen and click the mouse. The horizontal and vertical coordinates of the cursor location are displayed in a small viewing box at the top left of the computer screen. Numerical values of the zeros to 10 digits accuracy can be obtained by applying the numerical solving command,1 fsolve, to eq3 . If lesser accuracy is desired, e.g., 5 digits, the Digits command can be used.
> Digits:=5: A “functional”, or “arrow” operator2 f is introduced to systematically search for the K zeros in the range 3 (n−1) to 3 n using the fsolve command. Dividing by L then yields the k zeros.
> f:=n->fsolve(eq3,K,3*(n-1)..3*n)/L: When a number n is supplied, then subsequently entering f(n) will yield the zero (if one exists) in the given range. For n = 1 the search range is 0 to 3, for
1This command implements Newton’s method. [Ste87] 2Created on the keyboard with the hyphen (-) followed by the greater than symbol (>).

24

CHAPTER 1. LINEAR ODES OF PHYSICS

n = 2 the range is 3 to 6, and so on. The sequence command, seq, is used in sol2 to generate the ﬁrst four zeros of eq2 . Note that the k’s have been subscripted, the input syntax being k[n]. The zeros are then assigned.

> sol2:=seq(k[n]=f(n),n=1..4); assign(sol2):

1.8751

4.6941

7.8548

10.996

sol2 := k1 = L , k2 = L , k3 = L , k4 = L

The transcendental equation eq3 may be rewritten as cos(K) = −1/ cosh(K).

For large K, cosh(K) → ∞, so cos(K) → 0 and km → (m − 1/2) π/L for large

integer m. Setting a ≡ Y I/ , the ﬁrst four critical frequencies are calculated.

> critical_freq:=seq(omega[n]=a*k[n]ˆ2,n=1..4);

3.5160 a

22.035 a

61.698 a

120.91 a

critical freq := ω1 = L2 , ω2 = L2 , ω3 = L2 , ω4 = L2

The coeﬃcient C3 is collected in y, the result evaluated at k = kn, and the

sequence command used to generate the proﬁles Yn of the ﬁrst four deﬂection

modes. For brevity, only Y1 is shown here in the output of sol3 .

> sol3:=seq(Y[n]=eval(collect(y,_C3),k=k[n]),n=1..4);

sol3

:=

Y1

=

(0.18111

e(

1.8751 L

x

)

+

1.1811

e(−

1.8751 L

x

)

+

1.8751 x

sin(

)

L

−

1.8751 x

1.3622 cos(

))

L

C3 ,

sol3 is assigned and the ﬁrst four possible deﬂection modes plotted for L = 5

and C3 = 1/5, the picture being shown in Figure 1.3. The solid curve with one

zero corresponds to n = 1, the dashed curve with two zeros to n = 2, etc.

> assign(sol3): L:=5: _C3:=1/5:

> plot([seq(Y[n],n=1..4)],x=0..5,color=[red,green,blue,cyan], linestyle=[SOLID,DASH,DOT,SOLID],labels=["x","y"]);

0.4 y
0.2

0 –0.2

1

2x3

4

5

–0.4 Figure 1.3: First four deﬂection modes for the rotating bar.

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

25

1.1.4 Shake, Rattle, and Roll
Principles aren’t of much account anyway, except at election time. After that you hang them up to let them season. Mark Twain, American author, Municipal Corruption, speech, 4 Jan. 1901

It is election time on the planet Erehwon and the politicians are traveling far and wide to woo potential voters. Presidential candidate Amai Koorc is traveling on his own personal three-coach train which rides along a guide-way on a cushion of air. The middle coach (mass M > m) is occupied by Koorc and other political “heavies”, while the outer two coaches (each of mass m) contain media “light weights”. Each outer coach is connected to the middle one by an identical linear spring (i.e, governed by Hooke’s law) with spring constant K.
All three coaches were initially sitting stationary on a straight stretch of the guide-way with the coupling springs unstretched, when fringe members of the opposition party imparted an impulse to each coach causing the train to start “rolling” down the track in an erratic fashion which shook up the politicians and rattled the media. This recipe simulates the motion of the train.
To simplify the ﬁnal results, it is assumed3 that K, m, and M are positive.
> restart: with(plots): assume(K>0,m>0,M>0): Using Hooke’s law for the relative displacements x(t), y(t), and z(t) at time t of the outer left, middle, and outer right coaches from equilibrium, Newton’s second law yields the following three equations of motion.

> ode1:=m*diff(x(t),t,t)=K*(y(t)-x(t)); d2
ode1 := m ( dt2 x (t)) = K (y(t) − x (t))

> ode2:=M*diff(y(t),t,t)=K*(z(t)-y(t))-K*(y(t)-x(t));

ode2

:=

M

d2 ( dt2

y (t))

=

K (z (t)

− y(t)) − K

(y (t)

− x (t))

> ode3:=m*diff(z(t),t,t)=-K*(z(t)-y(t)); d2
ode3 := m ( dt2 z (t)) = −K (z (t) − y(t))

This is a system of three coupled second-order LODEs with constant coeﬃcients.

Given the general initial condition (dots indicating time derivatives) x(0) = A,

y(0) = B, z(0) = C, x˙ (0) = V 1, y˙(0) = V 2, and z˙(0) = V 3,

> ic:=(x(0)=A,y(0)=B,z(0)=C,D(x)(0)=V1,D(y)(0)=V2,D(z)(0)=V3): it would be very tedious to solve for x(t), y(t), and z(t) by hand. Even Maple needs some guidance here as to what method is best to use. If no method

3Note that assume applies the assumption throughout the entire worksheet, whereas assuming applies it only in the command line that it is used. By default, assumed quantities have attached “trailing tildes” in the output. The tildes can be removed by inserting interface(showassumed=0) prior to the assumption. If desired, they can be removed from all worksheets by clicking on File in the tool bar, then on Preferences, I/O Display, No Annotation, and Apply Globally.

26

CHAPTER 1. LINEAR ODES OF PHYSICS

option is speciﬁed, applying the dsolve command to the three ODEs, subject to the initial condition, would yield a long “messy” result. Including the method=laplace option, which makes use of the Laplace transform method,4 yields a somewhat simpler, but still lengthy, answer (not shown here).
> sol:=dsolve({ode1,ode2,ode3,ic},{x(t),y(t),z(t)}, method=laplace);
Using the list format [sin,cos], sine terms are now collected ﬁrst in sol, and then cosine terms. Since the analytic expressions are still lengthy, only x(t) is displayed here in the text.
> sol2:=collect(sol,[sin,cos]);

sol2 := {x (t) = 1

m (V1 − V3 ) sin(

K

t)

+

A (

−

C

)

cos(

K t)

2K

m

22

m

1 +(

M

)(3/2)

m

K (2 m + M )

sin(

t) (V3 − 2 V2 + V1 )

2 2m+M

K

Mm

1 M (−2 B + C + A) cos( +

K (2 m + M ) t)
Mm

2

2m+M

+ M (2 B + 2 t V2 ) + 2 m (t V1 + C + A + t V3 ) , · · · · · ·} 2 (2 m + M )

Recalling that x(t) represents the displacement of the ﬁrst outer coach from equilibrium, it can be seen that the motion is built up of two parts. The trig terms represent an oscillatory motion of the coach, while the last term corresponds to a translational motion as time t increases. The oscillatory part is governed by two characteristic frequencies, ω = K/m and K (2 m + M )/(M m).
The solution sol2 is now assigned and a functional operator f created to substitute parameter values into each solution and simplify the result.

> assign(sol2): f:=z->simplify(subs(par,z(t))):
The three coaches were initially in their equilibrium positions so A = B = C = 0. In some suitable set of Erehwonese units, the initial speeds imparted to the coaches by the opposition gang were V 1 = 2/3, V 2 = −1/3, and V 3 = 1/6. Each coach containing light-weight media had a mass m = 1 while the political heavies’ coach had a mass M = 2. The spring constant K = 4.

> par:=(A=0,B=0,C=0,V1=2/3,V2=-1/3,V3=1/6,m=1,M=2,K=4): If the ﬁrst outer coach was initially located at X = 1, the middle one at Y = 2, and the other outer coach at Z = 3, their positions at time t are as follows.

> X:=1+f(x); Y:=2+f(y); Z:=3+f(z);

4The Laplace transform of x(t) is deﬁned as L(x(t)) ≡ X(s) =

∞ 0

x(t)e−stdt.

Integrating

by parts and assuming e−st x(t) → 0 as t → ∞, then L(x˙ ) = s X(s) − x(0), and L(x¨) =

s2X(s)−sx(0)−x˙ (0). To solve a LODE with constant coeﬃcients, one can Laplace transform

the LODE, solve the resulting algebraic equation for X(s), and then perform the inverse

transform to obtain x(t). Laplace transforms are discussed in Chapter 6.

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

27

3√

√

1

t

X := 1 + 2 sin(2 2 t) + sin(2 t) +

32

8

24

Y := 2 −

3

√

√

2 sin(2 2 t) +

t

32

24

Z := 3 +

3

√

√

2 sin(2 2

t)

−

1

sin(2 t)

+

t

32

8

24

The positions of the three coaches are now plotted in Figure 1.4 over the interval

t = 0 to 20, the linestyles 1, 2, 3 generating solid, dotted, and dashed curves.

> plot([X,Y,Z],t=0..20,color=[red,blue,green],linestyle= [1,2,3],thickness=2,tickmarks=[3,3],labels=["t","X,Y,Z"]);

4

3 X,Y,Z
2

1

0

10

t

20

Figure 1.4: Positions of the three train coaches as a function of time.

The motion of the three coaches (represented by size 20 red boxes) is now animated and can be observed by executing the following command line.
> animate({[X,0],[Y,0],[Z,0]},t=0..100,frames=200,style= point,symbol=box,symbolsize=20,view=[0..8,-0.1..0.1], tickmarks=[3,2],labels=["x"," "]);
You can explore other possible motions by changing the parameter values and initial conditions. The time range and view may have to be altered.
1.1.5 “Resonances”, A Recipe by I. M. Curious
Training is everything. The peach was once a bitter almond; cauliﬂower is nothing but cabbage with a college education. Mark Twain, Pudd’nhead Wilson, ch. 5, (1894)
Over the years I have been fortunate to have one or more students in each mathematical physics class who stood out due to the quality of their work and their innate curiosity about the subject matter. As a representative of this elite

28

CHAPTER 1. LINEAR ODES OF PHYSICS

group, let me introduce Ms. I. M. Curious who will discuss in her own words the elegant and thorough computer algebra solution that she generated in solving the following problem involving a familiar nonhomogeneous LODE.
A mechanical system (of unit mass) experiences a Stokes’s law drag force FStokes = −2 α x˙ , a Hooke’s law restoring force FHooke = −ω2x, and a driving force FDrive = f cos(Ω t + δ). Here α is a positive constant, ω the natural frequency, f the force amplitude, Ω the driving frequency, and δ a phase angle.
(a) Obtain the solution of the resulting LODE for α < ω (underdamping), subject to the initial condition x(0) = X , x˙ (0) = V . Discuss the method used by Maple to solve the LODE and the structure of the solution.
(b) Derive an expression for the absolute value A of the steady-state amplitude as a function of Ω. Determine the resonant frequency Ωr at which A has its maximum value Amax and evaluate Amax.
(c) Taking X = −1, V = 2, ω = 1, α = 1/5, Ω = 3, f = 5, and δ = 0, determine x(t) and v(t) = x˙ (t) and plot the results. Approximately how long does it take for steady-state to prevail? Evaluate Ωr and plot the resonance curves A vs. Ω for some diﬀerent f values.

And here is I. M. to discuss her solution. “After loading the plots package, infolevel[dsolve]:=5 is entered so as
to provide maximum information on Maple’s ODE solving method.

> restart: with(plots): infolevel[dsolve]:=5: To save on later typing, I introduce the following alias command. When a, w, W, d, Wr, and Am are subsequently entered, the symbols α, ω, Ω, δ, Ωr, and Amax will be respectively produced in the output.
> alias(alpha=a,omega=w,Omega=W,delta=d,Omega[r]=Wr,A[max]=Am);

α, ω, Ω, δ, Ωr, Amax The Stokes, Hooke’s law, and driving forces are entered,

> F[Stokes]:=-2*a*diff(x(t),t); F[Hooke]:=-wˆ2*x(t);

F[Drive]:=f*cos(W*t+d);

FStokes

:=

−2

α

d (
dt

x (t))

FHooke := −ω2 x (t)

FDrive := f cos(Ω t + δ)

which are automatically substituted into Newton’s second law in ode.

> ode:=diff(x(t),t,t)-F[Stokes]-F[Hooke]=F[Drive];

ode

:=

d2 ( dt2

x (t))

+

2

α

d (
dt

x (t))

+

ω2

x (t)

=

f

cos(Ω

t

+

δ)

Assuming that α > 0, ω > 0, and α < ω, ode is solved for x(t) subject to the

initial conditions and the rhs of the result taken. The list of mathematical

methods tried are given in the output, along with the solution labeled x1 .

> x1:=rhs(dsolve({ode,x(0)=X,D(x)(0)=V},x(t)))
assuming(a>0,w>0,a<w); Methods for second order ODEs:

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

29

— Trying classiﬁcation methods —

trying a quadrature

trying high order exact linear fully integrable

trying diﬀerential order: 2; linear nonhomogeneous with symmetry [0,1]

trying a double symmetry of the form [xi=0, eta=F(x)]

Try solving ﬁrst the homogeneous part of the ODE

−> Tackling the linear ODE “as given”:

checking if the LODE has constant coeﬃcients

<− constant coeﬃcients successful

<− successful solving of the linear ODE “as given”

−> Determining now a particular solution to the nonhomogeneous ODE

building a particular solution using variation of parameters

<− solving ﬁrst the homogeneous part of the ODE successful

x1

:=

e(−α t)

√ sin( ω2 −α2

t)(−2 V

ω2

Ω2

+

Ω4

αX

+

V

Ω4

−

Ω3

f

sin(δ)

+ 4 V Ω2 α2 − Ω2 f α cos(δ) − α ω2 f cos(δ) − 2 Ω2 α ω2 X

+ Ω f sin(δ) ω2 + 4 Ω2 α3 X − 2 Ω f sin(δ) α2 + α ω4 X + V ω4)

√

/( ω2 − α2 (ω4 − 2 ω2 Ω2 + 4 Ω2 α2 + Ω4))

+

e(−α

√ t)cos( ω2

−α2

t)(f

cos(δ)

Ω2

−

2

f

α

Ω

sin(δ)

−

f

cos(δ)

ω2

+X

ω4

− 2 X ω2 Ω2 + 4 X Ω2 α2 + X Ω4) /(ω4 − 2 ω2 Ω2 + 4 Ω2 α2 + Ω4)

((ω2 − Ω2) cos(Ω t + δ) + 2 α Ω sin(Ω t + δ)) f

+

Ω4 + (−2 ω2 + 4 α2) Ω2 + ω4

Maple has successfully solved the ODE, a task I would not have wished to do by hand. It has recognized that ode is a second order nonhomogeneous LODE with the corresponding homogeneous equation having constant coeﬃcients. It has solved ode using the method of variation of parameters. The solution x1 is made up of two parts, the transient terms involving the exponentials which vanish (since α > 0) as t → ∞, and the remaining steady-state contribution which survives in this limit. Note that the steady-state part doesn’t depend on the initial conditions. I will now extract the steady-state solution xss from x1 by removing the terms in x1 which have e−α t.

> xss:=remove(has,x1,exp(-a*t));

((ω2 − Ω2) cos(Ω t + δ) + 2 α Ω sin(Ω t + δ)) f

xss :=

Ω4 + (−2 ω2 + 4 α2) Ω2 + ω4

The amplitude A of the steady-state solution can be obtained as follows. The

amplitude corresponds to maximum displacement of the oscillator at which time

the velocity is zero. I now solve for a time T at which this occurs.

> T:=solve(diff(xss,t)=0,t);
2αΩ T := −δ + arctan( ω2 − Ω2 )
Ω A is then obtained by evaluating xss at t = T and simplifying with the symbolic

30

CHAPTER 1. LINEAR ODES OF PHYSICS

option which picks a particular solution branch of the square root, the sign of which can be either plus or minus. The magnitude of A then follows on taking the absolute value of the result. The answer agrees with that found in Fowles and Cassiday[FC99].

> A:=simplify(eval(xss,t=T),symbolic): Amag:=abs(A);

Amag := √

f

ω4 − 2 ω2 Ω2 + 4 Ω2 α2 + Ω4

To ﬁnd the resonance frequency, Amag is diﬀerentiated with respect to Ω, set

equal to zero, and the result solved for the frequency.

> sol:=solve(diff(Amag,W)=0,W);

√

√

sol := 0, ω2 − 2 α2, − ω2 − 2 α2

The resonance frequency Ωr must correspond to the non-zero positive square root solution. Therefore, the second answer is selected in sol . The maximum

amplitude Amax is then obtained by evaluating Amag at Ω = Ωr and again simplifying with the symbolic option.

> Wr:=sol[2]; Am:=simplify(eval(Amag,W=Wr),symbolic); √
Ωr := ω2 − 2 α2

1 Amax := 2

√f α ω2 − α2

To answer part (c) of the problem, the given parameter values are entered.

> X:=-1: V:=2: w:=1: a:=1/5: W:=3: f:=5: d:=0: The displacement X1 and velocity V1 are calculated, the radical expressions being simpliﬁed with the radsimp command.

> X1:=radsimp(x1); V1:=radsimp(diff(x1,t));

X1

:=

6737

e(−

t 5

)

sin(

2

√ 6

t

)

√ 6

−

159

√

e(−

t 5

)

cos(

2

6t )

9816

5

409

5

− 250 cos(3 t) + 75 sin(3 t)

409

818

V1 :=

179

e(−

t 5

)

2 sin(

√ 6t )

√ 6

+

1411

e(−

t 5

)

2 cos(

√ 6

t )

9816

5

818

5

750

225

+ sin(3 t) + cos(3 t)

409

818

It was not speciﬁed how the results are to be plotted, so I will create a 3dimensional picture in gr1 of X1 vs. V1 vs. t by using the spacecurve command. The time range is taken to be t = 0 to 40, 1000 plotting points are selected, and the plot is enclosed in a viewing box.

> gr1:=spacecurve({[t,X1,V1]},t=0..40,numpoints=1000,
thickness=2,axes=box,labels=["t","x","v"]): So that the starting point in the 3-dimensional trajectory can be easily identi-

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

31

ﬁed, the textplot3d command is used in gr2 to place the word start (colored red) in the vicinity of the starting point.
> gr2:=textplot3d([[0,X-0.15,V,"start"]],color=red): The graphs are superimposed with the display command. The resulting picture (Figure 1.5) is enclosed in a viewing box which may be rotated by clicking on the computer plot and dragging with the mouse. In the upper left-hand corner of the computer screen, a small window indicates the angular coordinates of the viewing box. Here the orientation of the box is set to be (45◦, 45◦).
> display({gr1,gr2},orientation=[45,45],tickmarks=[3,3,3]);

start

2 v0

–2

–1

0

0 x
1

20t

40

Figure 1.5: Space curve showing X1 vs. V1 vs. t.

The wild gyrations seen in Figure 1.5 for small t are associated with the transient, while steady-state corresponds to the uniform, cyclic behavior at larger t. To obtain an estimate of the time beyond which steady-state prevails, the orientation of the viewing box can be changed to (-90◦, 0◦) so as to view X1 vs. t. Steady-state prevails for t greater than about 25 time units.
The resonance frequency is then evaluated in W1 and the value A1 of the absolute amplitude calculated at this frequency.
> W1:=evalf(Wr); A1:=evalf(Am);
W1 := 0.9591663048 A1 := 12.75775908 The resonance frequency of about 0.96 is slightly less than the natural frequency ω = 1. To locate the resonance frequency on the graph of the resonance curves, I will plot a thick, vertical, dashed, blue line of height A1 at W1 in L.
> L:=plot([[W1,0],[W1,A1]],color=blue,thickness=2,linestyle=3): To free the driving frequency and the force amplitude from their previously assigned values, they are now unassigned.
> unassign(’W’,’f’):

32

CHAPTER 1. LINEAR ODES OF PHYSICS

A functional operator pl is created for plotting Amag vs. Ω for diﬀerent f values over the frequency range Ω = 0 to 2 ω.
> pl:=i->plot(eval(Amag,f=i),W=0..2*w,thickness=2): Making use of the sequence command, resonance curves are generated for f = 1, 2, 3, 4, 5 and displayed along with L in Figure 1.6. As I expected, the resonance curves agree with those drawn in standard texts.”
> display({L,seq(pl(i),i=1..5)},tickmarks=[2,3],labels=[W,"A"]);

10
A 5

0

1

Omega

2

Figure 1.6: Resonance curves for f = 1 (bottom curve) to f = 5 (top).

1.1.6 Mr. Dirac’s Famous Function
The man with a new idea is a crank until the idea succeeds. Mark Twain, Following the Equator, ch. 32, (1897).

Consider a very long uniform horizontal beam glued to an elastic foundation,

the foundation exerting a Hooke’s law restoring force. Under the inﬂuence of

a steady point force of magnitude F exerted at x = 0, the static displacement

ψ(x) of the beam is governed by the nonhomogeneous LODE [Hil57],

d4ψ

Y I dx4 + K ψ = F δ(x)

(1.3)

where Y is Young’s modulus, I the moment of inertia of the beam’s cross-

section about a horizontal axis, K the spring constant, and δ(x) the Dirac delta

function. The delta function (δ function) is deﬁned by

β

δ(x) = 0, x = 0; δ(x) = ∞, x = 0;

δ(x) dx = 1, (α, β > 0). (1.4)

−α
The δ function should be regarded as the limit of, e.g, a Gaussian function5

which is made progressively taller and narrower in such a way that the area

5For

the

Gaussian,

δ(x) =

lim

√ A→∞(A/ π)

e−A2

x2 .

The

choice

of

functions

is not

unique.

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

33

under the curve remains equal to 1. Changing the argument of the δ-function from x to x − ζ shifts the location of the δ-function from x = 0 to x = ζ.
It should be noted that the δ-function has the dimensions x−1. It has a
number of properties, the most important of which is the “selection” property.
If F (x) is a smooth function (not another δ-function), then

ζ+β
F (x) δ(x − ζ) dx = F (ζ), (α, β > 0).

(1.5)

ζ−α
The Dirac delta function concept may be generalized to higher dimensions, e.g.,

δ( r ) ≡ δ(x) δ(y) δ(z) is a 3-dimensional δ-function located at x = y = z = 0.

A solution of a linear ODE which has a delta function appearing in the

nonhomogeneous term is called a Green function. The goal of the following

recipe is to determine the static displacement of the beam due to the point

force, i.e., the Green function, for Equation (1.3) and plot it.

In the ODE (1.3), the mom√ent of inertia I appears. This is a protected symbol in Maple, representing −1. Since I is a commonly used symbol in

physics, it is often√desirable to unprotect it. The following interface command is used to let j = −1, thus freeing up I.

> restart: interface(imaginaryunit=j): The LODE (1.3) is inputted, the command Dirac(x) being used to enter δ(x).

> ode:=Y*I*diff(psi(x),x$4)+K*psi(x)=F*Dirac(x);
d4 ode := Y I ( dx4 ψ(x)) + K ψ(x) = F Dirac(x) The ODE ode can be simpliﬁed by introducing the parameter α = (Y I/K)1/4 and letting ψ(x) = (F/K) G(x), where G(x) is deﬁned to be the Green function. The transformations are substituted into ode, producing ode2 ,

> ode2:=subs({Y=alphaˆ4*K/I,psi(x)=F*G(x)/K},ode);

ode2

:=

α4 K

∂4 ( ∂x4

F (

G(x) )) +
K

F

G(x)

=

F

Dirac(x)

which is then divided by F in ode3 , and the result expanded.

> ode3:=expand(ode2/F);

ode3

:=

α4

d4 ( dx4

G(x))

+

G(x)

=

Dirac(x)

For x < 0 and x > 0, the rhs of ode3 is equal to zero. The general solution of

ode3 is obtained, assuming that x < 0.

> sol:=rhs(dsolve(ode3,G(x))) assuming x<0;

√

√

sol :=

C1

e(

(1/2−1/2 α

j)

2x) +

C2

e(

(−1/2−1/2 α

j)

2x)

√

√

+

C3

e(

(−1/2+1/2 α

j)

2x) +

C4

e(

(1/2+1/2 α

j)

2x)

Clearly, the general solution for x > 0 will be of a similar structure. Let’s look

at the region to the left of the origin, assigning this portion of G the name GL.

Since the beam is very long, little error is committed by taking the beam to be

34

CHAPTER 1. LINEAR ODES OF PHYSICS

of inﬁnite length. Physically, the displacement of the beam from equilibrium, and therefore GL, should go to zero as x → −∞. To satisfy this asymptotic boundary condition, only the two exponentials which have (1/2 − 1/2 j) and (1/2 + 1/2 j) in the exponents should be kept. The other two exponentials involving (−1/2 − 1/2 j) and (−1/2 + 1/2 j) diverge as x → −∞. The following command selects the two desired exponential terms to keep in GL.

> GL:=select(has,sol,{1/2-j/2,1/2+j/2});

√

√

GL :=

C1

e(

(1/2−1/2 α

j)

2x) +

C4

e(

(1/2+1/2 α

j)

2x)

Similarly, applying the condition G → 0 as x → ∞, the select command is used to obtain the form GR of the Green function to the right of the origin.

> GR:=select(has,sol,{-1/2-j/2,-1/2+j/2});

√

√

GR :=

C2

e(

(−1/2−1/2 α

j)

2x) +

C3

e(

(−1/2+1/2 α

j)

2x)

The four constants must now be evaluated. Since the displacement is physically continuous at the origin, the condition GR−GL = 0 at x = 0 is entered in eq0.

> eq[0]:=simplify(eval(GR-GL,x=0))=0;

eq0 := C2 + C3 − C1 − C4 = 0 An operator f is formed to simplify the nth derivative of the diﬀerence GR − GL evaluated at x = 0. Both n and the diﬀerence s must be given.

> f:=(n,s)->simplify(alphaˆn*(eval(diff(GR-GL,x$n),x=0)=s));

f

:=

(n,

s)

→

simplify(αn

∂n (( ∂xn

(GR

−

GL))

x

=

0

=

s))

For n = 1 and 2, s = 0, i.e., the ﬁrst and second derivatives of G are continuous at

x = 0. The third derivative (n = 3) is discontinuous at x = 0, however. Mentally integrating ode3 from the left to the right of the δ function yields s = 1/α4.

Making use of these results and f , the remaining three conditions are entered.

> eq[1]:=sqrt(2)*f(1,0); eq[2]:=f(2,0);

eq[3]:=sqrt(2)*f(3,1/alphaˆ 4);

eq1 := − C2 − C2 j + C3 j − C3 + C1 j − C1 − C4 − C4 j = 0

eq2 := ( C2 − C3 + C1 − C4 ) j = 0

√

eq3 := − C2 j +

C2 +

C3 +

C3 j +

C1 +

C1 j −

C4 j +

C4 =

2 α

The set of four equations are solved for the four constants,

> sol2:=solve({seq(eq[n],n=0..3)},{_C1,_C2,_C3,_C4});

sol2 :=

1 (

−

1

√ j) 2

1 1√ ( + j) 2

1 1√ ( + j) 2

C1 = 8 8

, C2 = 8 8

, C4 = 8 8

,

α

α

α

C3

=

1 (
8

−

1 8

√ j) 2

α

1.1. LINEAR ODES WITH CONSTANT COEFFICIENTS

35

and the solution sol2 assigned. The constants are automatically substituted into GL and GR, which are put into real forms by applying the evalc command.

> assign(sol2): GL:=evalc(GL); GR:=evalc(GR);

GL

:=

1

√ 2

e(

√ 2x
2α

)

√ 2x
cos( ) 2α

−

1

√ 2

e(

√ 2x
2α

)

sin(

√ 2

x

)

2α

4

α

4

α

GR

:=

1

√ 2

e(−

√ 2x
2α

)

cos(

√ 2

x

)

2α

+

1

√ 2

e(−

√ 2x
2α

)

sin(

√ 2

x

)

2α

4

α

4

α

Noting that there is a symmetry in the two forms (replacing x with −x in

GL yields GR), the Green function can be put into a more compact form by

replacing x by its absolute value, |x|, in GR, then factoring, and relabeling the

result as G. The static displacement of the beam is then ψ(x) = (f /K) G(x).

> G:=factor(subs(x=abs(x),GR));

G

:=

1

√ 2

e(−1/2

√

2 |x| α

)

1 (cos(
2

√ 2 |x| ) + α

1 sin(
2

√ 2 |x| )) α

4

α

The Green function G is now plotted for the representative value α = 1.

> plot(eval(G,alpha=1),x=-10..10,thickness=2, labels=["x","G"]); 0.35

G

–10

0

x

10

Figure 1.7: Green function G for the inﬁnite beam.

The result is shown in Figure 1.7. As expected, G and therefore the beam displacement is localized near the origin where the point force is applied.

36

CHAPTER 1. LINEAR ODES OF PHYSICS

1.2 Linear ODEs with Variable Coeﬃcients

In this section, linear ODEs with variable coeﬃcients are considered. Our attention will be focused on the second-order Sturm–Liouville (S-L) equation,

d

dy

dx

p(x) dx

− q(x) y + λ w(x) y = 0,

(1.6)

where λ is a real parameter while p(x), q(x), w(x) are real functions and w(x) is taken to be non-negative over the range x = a to b of interest. The S-L equation, and its nonhomogeneous counterpart, plays a very important role in the mathematical analysis of many physical problems, particularly for boundary value problems where y or its ﬁrst derivative vanish at a and b. In this case the y ’s are referred to as the eigenfunctions and the λ ’s as the eigenvalues. For certain choices of p, q, w, and λ, the general S-L equation reduces to speciﬁc “well-known” LODEs such as Bessel’s equation, Legendre’s equation, Hermite’s equation, etc. The standard approach to solving these equations is to seek an inﬁnite power series solution. In some cases (e.g., for Bessel’s equation) the solution remains as an inﬁnite series, while in other cases the inﬁnite series have to be truncated (e.g., for Legendre’s and Hermite’s equations) to ﬁnite polynomials to avoid divergence problems for large x. In either case, these solutions to special forms of the S-L equation are referred to as special functions (e.g., Bessel functions, Legendre functions (polynomials), etc.). The detailed series derivation of these special functions will be postponed until Chapter 2. In this section, we shall be content to see what Maple reveals about some of these special functions and how physical problems involving these functions can be easily dealt with. You will encounter many more members of the S-L “family” of special functions as you progress through the book. For example, in the Entrees you will see that special functions play an extremely important role in the solutions of linear PDEs such as the wave and diﬀusion equations because these equations can be “separated” into systems of S-L ODEs.

1.2.1 Introducing the Sturm–Liouville Family
My books are water; those of the great geniuses is wine. Everybody drinks water. Mark Twain, Mark Twains Notebooks and Journals, Notebook 26, (1887)
Jennifer, a young mathematician at the Metropolis Institute of Technology (MIT) and a ﬁrm believer in using computer algebra to teach applied mathematics to engineers and physicists, has kindly consented to provide us with some of the computer algebra recipes that she has developed. In the following recipe, she introduces two of the more “famous” members of the S-L family, namely the Bessel and Legendre ODEs.
Jennifer creates two functional operators, SL for generating a speciﬁc ODE from the S-L equation (1.6) on subsequently specifying the forms of p, q, w

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

37

and the parameter L (short for λ), and Y for generating the general analytic solution of a speciﬁed ode and taking the right-hand side of the result.

> restart:

> SL:=(p,q,w,L)->diff(p*diff(y(x),x),x)-q*y(x)+L*w*y(x)=0;

SL

:=

(p,

q,

w,

L)

→

d (
dx

(p

d (
dx

y (x))))

−

q

y (x)

+

L

w

y (x)

=

0

> Y:=ode->rhs(dsolve(ode,y(x))):

According to standard texts (e.g., [MW71], [Boa83]), Bessel’s’ equation should result on choosing p = x, q = −x, w = −1/x, and L ≡ λ = −n2. Entering these speciﬁc forms as arguments in SL produces ode1 .

> ode1:=SL(x,-x,1/x,-nˆ2);

ode1

:=

d (
dx

y (x))

d2 + x ( dx2

y(x)) + x y(x) −

n2 y(x) x

=

0

Loading the DEtools library package, Jennifer enters the following odeadvisor

command line to see if Maple can classify ode1 and oﬀer any information about

this equation. The ODE is identiﬁed as Bessel’s equation and inclusion of the

help option causes a help page to be opened with information on this equation. She adds a comment to close the help page when ﬁnished reading it.

> with(DEtools): odeadvisor(ode1,help); #close Help page

[ Bessel ]
Entering the infolevel[dsolve] command so as to gain information about the methods tried in attempting to solve the ODE, she then uses the arrow operator Y to solve ode1 .

> infolevel[dsolve]:=2: y1:=Y(ode1);
Methods for second order ODEs: — Trying classiﬁcation methods — trying a quadrature checking if the LODE has constant coeﬃcients checking if the LODE is of Euler type trying a symmetry of the form [xi=0, eta=F(x)] checking if the LODE is missing ’y’ −> Trying a Liouvillian solution using Kovacic’s algorithm <− No Liouvillian solutions exists −> Trying a solution in terms of special functions:
−> Bessel <− Bessel successful <− special function solution successful
y1 := C1 BesselJ(n, x) + C2 BesselY(n, x)
After identifying the ODE as second order, Maple tries various approaches before seeking and obtaining a general special function solution in terms of Bessel functions. Highlighting, say, BesselJ in the output with the mouse and clicking on “Help on BesselJ”, opens a help page on Bessel functions. BesselJ(n, x) is

38

CHAPTER 1. LINEAR ODES OF PHYSICS

identiﬁed as a Bessel function of the ﬁrst kind of order n, while BesselY(n, x) is a Bessel function of the second kind. In standard mathematical notation, they are usually written as Jn(x) and Yn(x), respectively. Before delving into some of the properties of Bessel functions, Jennifer notes that on executing the command ?inifcns, a help page is opened which lists all the functions known to Maple and has hyperlinks to associated help pages (e.g., for BesselJ).
> ?inifcns; Closing the help page, Jennifer forms an arrow operator f for plotting a sequence of four (the number can be easily changed) Bessel functions with integer subscript. The name N (BesselJ or BesselY) of the Bessel function must be supplied along with the horizontal range x = x1 to x2 over which the function is to be plotted. The four curves are given diﬀerent colors and line styles. Line style 4 produces a DASH-DOT curve. The vertical range is limited with the view command to −1 to +1 because the Yn(x) become inﬁnitely large at x = 0 if this point is included in the range of interest.
> f:=(N,x1,x2)->plot([seq(N(n,x),n=0..3)],x=x1..x2,thickness=2, color=[red,blue,green,cyan],linestyle=[1,2,3,4], view=[x1..x2,-1..1],tickmarks=[2,2]):
Making use of f, the Jn(x) and Yn(x) are plotted for x = x1 = 0 to x2 = 20.
> f(BesselJ,0,20); f(BesselY,0,20);

1

1

0

1x0

20

1x0

20

–1

–1

Figure 1.8: Left plot: Left to right, J0 to J3. Right: Left to right, Y0 to Y3.

The Bessel functions J0(x), J1(x), J2(x), and J3(x) are ordered from left to right in the left plot of Figure 1.8. At x = 0, J0 has the value 1, while all other positive integer Jn are equal to zero there. The Bessel functions Y0(x), Y1(x), Y2(x), and Y3(x), with the same ordering, are shown on the right of Figure 1.8. The Yn(x) diverge to −∞ at x = 0, so are rejected in physical problems where the origin is part of the range of interest.

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

39

Of particular importance in solving problems involving Bessel functions is knowing the locations of the zeros. The ﬁrst 5 zeros of, e.g., J1 are now obtained with the following BesselJZeros command. Note that the argument 1 is expressed in ﬂoating point form, i.e., 1.0, in order to numerically evaluate the zeros. The command BesselYZeros will generate the zeros of the Yn(x).
> Zeros_J1:=BesselJZeros(1.0,1..5);

Zeros J1 := 3.831705970, 7.015586670, 10.17346814, 13.32369194, 16.47063005

For large x, both the Jn(x) and Yn(x) have the appearance of slowly decreasing sine or cosine functions. Jennifer conﬁrms this conjecture by Taylor expanding, e.g., J1(x) about x = +∞ and keeping the ﬁrst term in the expansion.
> taylor(BesselJ(1,x),x=infinity,1);

√

π

2 cos(x + )

−

√4 π

1 x + O(( 1 )(3/2))
x

The “order of” term, O((1/x)3/2), is removed with convert(%,polynom), the “ditto operator”, %, applying the command to the previously executed result.6

> J1_asymptotic:=convert(%,polynom);

√

π1

2 cos(x + )

J1 asymptotic := −

√4 x

π

Asymp√totically, J1(x) behaves like a cosine function whose amplitude decreases like 1/ x. The Bessel functions have many important properties which are too

numerous for Jennifer to explore here. For an exhaustive list of the properties

of all special functions, she refers the reader to the voluminous Handbook of

Mathematical Functions [AS72]. One important property shared by special

functions is that they satisfy recurrence relations, relating functions of diﬀerent

orders. Here’s an example of a recurrence relation for the Jn(x). This recurrence relation relates Bessel functions of orders n−1, n+1, and n for arbitrary x.

> recurrence:=BesselJ(n-1,x)+BesselJ(n+1,x) =simplify(BesselJ(n-1,x)+BesselJ(n+1,x));

recurrence := BesselJ(n − 1, x) + BesselJ(n + 1, x) = 2 n BesselJ(n, x) x
Now, Jennifer introduces Legendre’s ODE by entering the Sturm–Liouville arrow operator SL with p = 1−x2, q = 0, w = 1, and L ≡ λ = n (n + 1). The
diﬀerential equation ode2 is then solved and identiﬁed as Legendre’s equation.

> ode2:=SL(1-xˆ2,0,1,n*(n+1)); y2:=Y(ode2);

ode2

:=

−2 x ( d dx

y(x)) + (1

−

x2)

(

d2 dx2

y(x)) + n (n

+ 1) y(x)

=

0

Methods for second order ODEs:

...................................................................

6To recall the second previous result, use two percent signs, %%, and so on.

40

CHAPTER 1. LINEAR ODES OF PHYSICS

−> Trying a solution in terms of special functions: −> Bessel −> elliptic −> Legendre <− Legendre successful
<− special function solution successful
y2 := C1 LegendreP(n, x) + C2 LegendreQ(n, x)
Highlighting LegendreP with the mouse and opening up the associated help page reveals that LegendreP(n, x) is the Legendre function of the ﬁrst kind of order n, while LegendreQ(n, x) is the Legendre function of the second kind. In standard mathematical notation, they are written as Pn(x) and Qn(x), respectively. If the odeadvisor command is applied to ode2 , the ODE is identiﬁed

> odeadvisor(ode2); [ Gegenbauer ]
as a Gegenbauer equation, which has the general structure [AS72],

(1 − x2) y − (2 α + 1) x y + n (n + 2 α) y = 0.

(1.7)

Legendre’s ODE is a special case of Equation (1.7) with α = 1/2.
The Legendre functions Pn(x) with n = 0 or a positive integer play an important role in boundary value problems involving spherical polar coordinates, in which case x = cos(θ) where θ is the polar angle measured from the z-axis. The polar angle runs from 0 to π radians, so x spans the range 1 to −1. For n = 0, 1, 2, ..., the P ’s reduce to the Legendre polynomials which Jennifer now generates for n = 0 to 5. The simplify command must be applied to produce the ﬁnite polynomial forms.

> Ps:=seq(simplify(LegendreP(n,x)),n=0..5);

Ps

:=

1,

x,

−1

+

3 x2 ,

5

x3

−

3

x,

3

+

35

x4

−

15

x2,

63

x5

−

35

x3

+

15

x

2 22

28 8

48

4

8

The polynomials may also be generated by loading the orthopoly library package

and using the syntax P(n,x) to enter the nth order Legendre polynomial.

> with(orthopoly): seq(P(n,x),n=0..5);

1,

x,

−1

+

3 x2 ,

5

x3

−

3

x,

3

+

35

x4

−

15

x2,

63

x5

−

35

x3 +

15

x

2 22

28 8

48

4

8

To produce Qn(x) over the range x = −1 to 1, Jennifer enters EnvLegendreCut: =1..infinity: which selects the desired mathematical branch7 of the function.

The Q ’s are then produced for n = 0, 1, 2. They are expressible as combinations

of log functions.

> _EnvLegendreCut:=1..infinity:

> Qs:=seq(simplify(LegendreQ(n,x)),n=0..2);

7To plot Qn(x) for |x| > 1, enter EnvLegendreCut:=-1..1: and adjust the view.

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

41

Qs

:=

1 2

ln(1

+

x) −

1 2

ln(1 − x),

1 2

x ln(1 + x) −

1 2

x ln(1

−

x)

−

1,

− 1 ln(1 + x) + 1 ln(1 − x) + 3 x2 ln(1 + x) − 3 x2 ln(1 − x) − 3 x

4

4

4

4

2

Using the arrow operator f, the Legendre functions of both kinds are now

plotted for n = 0 to 3 over the horizontal range x = −1 to 1.

> f(LegendreP,-1,1); f(LegendreQ,-1,1);

1

1

–1

0

x

1 –1

0

x

1

–1

–1

Figure 1.9: Left plot: P0, P1, P2, P3. Right: Q0, Q1, Q2, Q3.

P0(x) (horizontal curve), P1(x) (diagonal curve), P2(x) (parabola), and P3(x) (N-shape) are shown in the left plot of Figure 1.9. Q0(x) (solid curve), Q1(x) (parabola), Q2(x) (N-shape), and Q3(x) (W-shape) are shown in the right plot of the ﬁgure. The Pn are well behaved at x = ±1, but the Qn diverge at these points and must be rejected in physical problems which include x = ±1 in the

range of interest.

An important general property that all solutions yn(x) of the Sturm–Liouville equation corresponding to a given λn possess is orthogonality. Provided that y(x), or y (x), or p(x) vanishes at the end points a and b of the range (referred

to as Sturm–Liouville boundary conditions), then

b
w(x) ym(x) yn(x) dx = 0, for m = n.
a

(1.8)

w(x) is referred to as the weight function. Noting that w(x) = 1 for Legendre’s

equation and that p = 1 − x2 vanishes at x = a = −1 and at b = +1, the

orthogonality conditions

1 −1

Pm

(x)

Pn(x)

dx

=

0

and

1 −1

Qm(x)

Qn(x)

dx

=

0

should prevail for m = n. For speciﬁc values of m and n the former condition

is easy to prove, while proving the latter condition is more formidable.

Jennifer tackles the second orthogonality condition, taking m = 3 and n = 2.

She uses the “inert” form Int on the left of the following command line to

42

CHAPTER 1. LINEAR ODES OF PHYSICS

display the form of the integral and the “active” form on the right to evaluate the integral. The answer is 0 as expected.
> orthog:=Int(LegendreQ(2,x)*LegendreQ(3,x),x=-1..1) =int(simplify(LegendreQ(2,x)*LegendreQ(3,x)),x=-1..1);
1
orthog := LegendreQ(2, x) LegendreQ(3, x) dx = 0
−1

1.2.2 Onset of Bending in a Vertical Antenna
Truth is stranger than ﬁction, but it is because Fiction is obliged to stick to possibilities; Truth isn’t. Mark Twain, Following the Equator, ch. 15, (1897).

As a follow up to the last recipe, Jennifer has asked her class to examine the stability of an antenna which consists of a thin vertical wire of length L and uniform circular cross-section of radius a which is clamped at its lower end and is free at its upper end. Let θ be the angular deﬂection of the antenna from the vertical at a distance y from the top, Y the Young’s modulus, ρ the mass density, and g the acceleration due to gravity. If the length L is small, the antenna is “stable” in the vertical position, i.e., θ = 0 for all values of y. As L increases, there is a critical value beyond which the antenna is unstable and will bend from the vertical.
By considering the shear and gravitational forces on the wire, it can be shown that the relevant LODE for small angular displacements θ is

d2θ dy2

=

−c2 y θ,

2 where c =
a

ρg .
Y

(1.9)

(a) Noting that θ = 0 at y = L (clamped at bottom end) and dθ/dy = 0 at y = 0 (free at top), determine the solution of the ODE, identifying the functions which occur. Express the solution in terms of Bessel functions.

(b) Prove that the critical length for bending is given by Lcr (2.8/c)2/3.

(c) Determine Lcr for a steel (Y = 2.1 × 1011 N/m2 and ρ = 7800 kg/m3) wire of radius 1 mm. Take g = 9.8 m/s2.

Jennifer has provided us with the following computer algebra solution taken from her answer key. The governing ODE is entered.

> restart:

> ode:=diff(theta(y),y,y)=-cˆ2*y*theta(y);

ode

:=

d2 dy2

θ(y)

=

−c2 y θ(y)

The ODE is solved for θ(y) subject to the boundary condition dθ/dy = 0 at

y = 0 and the rhs of the solution taken.

> theta:=rhs(dsolve({ode,D(theta)(0)=0},theta(y)));

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

43

√ θ := C2 3 AiryAi(−(c2)(1/3) y) + C2 AiryBi(−(c2)(1/3) y) Jennifer has not included the other boundary condition in the dsolve command because then only the trivial solution θ = 0 would be produced. Highlighting AiryAi in the output with the mouse, clicking on Help, and then on “Help on AiryAi”, opens a help page which indicates that AiryAi is an Airy wave function. AiryBi is another Airy function. According to Help, the Airy functions are related to the Bessel functions Jn/3 where n is a positive or negative integer. Using this information, θ is converted to Bessel functions of the ﬁrst kind and simpliﬁed assuming that y > 0 and c > 0. θ is expressed in terms of J(−1/3).
> theta:=simplify(convert(theta,BesselJ)) assuming y>0,c>0;

2 θ :=

C2

√ 3 c(1/3)

√y BesselJ( −1 ,

2 c y(3/2) )

3

3

3

The other boundary condition, θ(y = L) = 0, is now applied.

> bc:=eval(theta,y=L)=0;

2 bc :=

C2

√ 3

c(1/3)

√ L

BesselJ(

−1

,

2 c L(3/2) )

=0

3

3

3

For θ to have a non-trivial solution, the coeﬃcient C2 = 0, so the boundary

condition must reduce to the Bessel function being equal to zero. The select

command is used to extract the Bessel function from the lhs of the bc and the

boundary condition is re-expressed as follows.

> bc:=select(has,lhs(bc),BesselJ)=0;

−1 2 c L(3/2)

bc := BesselJ( ,

)=0

3

3

Clearly, the critical length for bending must correspond to ﬁnding the ﬁrst zero

of the above Bessel function. The following op command is used to extract the

second operand from the lhs of bc.

> X:=op(2,lhs(bc));

2 c L(3/2) X :=
3 The ﬁrst zero of J(−1/3) is obtained.
> s:=BesselJZeros(evalf(-1/3),1); s := 1.866350859
The critical value Lcr follows on setting X = s and solving for L. Only one of the answers is real, the other two being complex.

> Lcr:=solve(X=s,L);

1.986352708 (c2)(2/3)

Lcr :=

c2

,

(− 0.7046901283 (c2)(1/3) + 1.220559106 I (c2)(1/3) )2,

c

c

0.7046901283 (c2)(1/3) (−

−

1.220559106 I

(c2)(1/3) )2

c

c

44

CHAPTER 1. LINEAR ODES OF PHYSICS

The ﬁrst answer (the real one) is selected and simpliﬁed with the symbolic option. This is the expression for the critical length.

> Lcr:=simplify(Lcr[1],symbolic);

1.986352708

Lcr :=

c(2/3)

To conﬁrm that the critical length Lcr (2.8/c)2/3, the numerator of Lcr is

extracted and raised to the 3/2 power in p. It is then evaluated to 2 digits

accuracy in p2, yielding 2.8 as desired.

> p:=(numer(Lcr))ˆ(3/2); p2:=evalf(p,2); p := 2.799526291 p2 := 2.8
To determine Lcr for the steel wire, the given parameter values are entered.

> g:=9.8: a:=0.001: Y:=2.1*10ˆ11: rho:=7800: The parameter c is evaluated and the critical length for bending of the steel wire antenna determined.

> c:=evalf((2/a)*sqrt(rho*g/Y)): Lcr:=Lcr; Lcr := 1.752545257
The antenna will not bend from the vertical if its length L < 1.75 meters.

1.2.3 The Quantum Oscillator
Anybody who is not shocked by this subject has failed to understand it. Neils Bohr, 1922 Nobel laureate in physics, referring to quantum mechanics

Over the years I have had occasion to teach an introductory quantum mechanics

course which concentrates on how to do quantum mechanics, leaving it to our

departmental “guru” to deal with deeper quasi-philosophical questions of what

it means in a higher-level course. In the doing category, a standard problem

(see Griﬃths [Gri95]) is to derive the probability distribution for the quantum

mechanical version of the one-dimensional simple harmonic oscillator. This may

be done either “algebraically” using “ladder operators” or by the more brute

force method of directly solving the time-independent Schr¨odinger equation

for the probability amplitude ψ. Once ψ is determined, the probability density

P (x) = |ψ(x)|2 may be calculated. The probability that a particle can be found

between, say x = a and x = b, is

b a

P

(x)

dx.

Of

course,

∞ −∞

P

(x)

dx

=

1.

This recipe illustrates how P (x) may be painlessly derived, plotted, and

interpreted for the quantum oscillator starting with the Schro¨dinger equation.

The PDEtools package is loaded because it contains the dchange command

which will be used to change both the dependent and independent variables.

> restart: with(PDEtools): The Schro¨dinger ODE is entered for a particle of mass m. Here E and V are the total and potential energy and hbar ≡ ¯h = h/(2π), where h is Planck’s constant.

> ode:=(hbarˆ2/(2*m))*diff(psi(x),x,x)+(E-V)*psi(x)=0;

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

45

ode

:=

1

hbar

2

(

d2 dx2

ψ(x))

+

(E

− V ) ψ(x)

=

0

2

m

For a particle experiencing a Hooke’s law restoring force, V = (1/2) m ω2 x2,

where ω is the frequency and x is the displacement of the particle from equi-

librium. On entering V , its form is automatically substituted into ode.

> V:=(1/2)*m*omegaˆ2*xˆ2: ode:=ode;

ode

:=

1

hbar

2

(

d2 dx2

ψ(x))

+ (E

−

m ω2 x2 ) ψ(x)

=

0

2

m

2

Since h¯ ω has the units of energy, let’s express E in these energy units, writing

E = (n + 1/2) h¯ ω. The form n + 1/2 of the “scale factor”, where the parameter

n remains to be determined, has been chosen for later convenience. At the same

time, ode is multiplied by (2/(h¯ω) and the result expanded in ode2 .

> E:=(n+1/2)*hbar*omega: ode2:=expand(2*ode/(hbar*omega));

d2

ode2 := hbar ( dx2 ψ(x)) + 2 ψ(x) n + ψ(x) − ω ψ(x) m x2 = 0

ωm

hbar

The constants can be removed from ode2 by introducing a new independent

variable ζ deﬁned by x = ¯h/(mω) ζ and also setting ψ(x) = f (ζ) e−ζ2/2.

This transformation of variables is now entered.

> tr:={x=sqrt(hbar/(m*omega))*zeta,psi(x)=f(zeta)*exp(-zetaˆ2/2)}: Using the dchange command ode2 is expressed in terms of the new variables.

> ode3:=dchange(tr,ode2,[zeta,f(zeta)]);

ode3

:=

d2 ( dζ2

f (ζ)) e(− ζ22)

−

d 2(
dζ

f (ζ)) ζ

e(− ζ22)

+

2 f (ζ) e(− ζ22)

n

=

0

Dividing ode3 by the common exponential factor, e−ζ2/2, yields ode4 ,

> ode4:=expand(ode3/exp(-zetaˆ2/2));

d2

d

ode4

:=

( dζ2

f (ζ)) −

2( dζ

f (ζ)) ζ

+ 2 f (ζ) n

=

0

which is the Hermite ODE. Hermite’s equation is another S-L ODE, being obtained from (1.6) by setting p(ζ) = e−ζ2 , q(ζ) = 0, w(ζ) = e−ζ2 , and λ = 2 n.

The general solution of ode4 is now sought.

> f:=rhs(dsolve(ode4,f(zeta)));

C1 e( ζ22) WhittakerM( n + 1 , 1 , ζ2) C2 e( ζ22) WhittakerW( n + 1 , 1 , ζ2)

f :=

√ 2 44 +

√ 2 44

ζ

ζ

Surprisingly, the answer is not given in terms of Hermite functions, but in-

stead in terms of another special function, the Whittaker functions Mµ,ν(z) and Wµ,ν(z), which satisfy Whittaker’s diﬀerential equation,

y (z) + [−1/4 + µ/z + (1/4 − ν2)/z2] y(z) = 0,

(1.10)

46

CHAPTER 1. LINEAR ODES OF PHYSICS

with µ = n/2+1/4, ν = 1/4, and z = ζ2 here. However, the WhittakerW function can be converted to a Hermite function by using convert(f,Hermite).
> f:=convert(f,Hermite);

f :=

C1

e(

ζ2 2

)

WhittakerM(

n

+

1 ,

1 ,

ζ2)

√ 2 44

+

C2 HermiteH√(n,

ζ2) (ζ2)(1/4)

ζ

ζ 2n

To avoid divergence problems at ζ = ±∞, the WhittakerM function is removed

> f2:=remove(has,f,WhittakerM);

f2 := C2 HermiteH√(n, ζ2) (ζ2)(1/4) ζ 2n
from f , and the result simpliﬁed with the radsimp command.

> f2:=radsimp(f2);

C2 HermiteH(n, ζ)

f2 :=

2n

In terms of ζ, the probability amplitude is given by ψ = f 2 e−ζ2/2.

> psi:=f2*exp(-zetaˆ2/2);

C2

HermiteH(n,

ζ)

e(−

ζ2 2

)

ψ :=

2n

To be physically meaningful and to satisfy the normalization condition, ψ must

remain ﬁnite over the range ζ = −∞ to +∞. This can only be accomplished

if the WhittakerM function is removed (which has already been done) and n

takes on the values n = 0, 1, 2, 3, . . .. In this case, the Hermite functions reduce

to the Hermite polynomials Hn(ζ). The Hermite polynomials can be readily generated. Here are the ﬁrst six.

> seq(H[n]=simplify(HermiteH(n,zeta)),n=0..5);

H0 = 1, H1 = 2 ζ, H2 = −2 + 4 ζ2, H3 = 8 ζ3 − 12 ζ,

H4 = 12 + 16 ζ4 − 48 ζ2, H5 = 32 ζ5 − 160 ζ3 + 120 ζ

The Hermite polynomials can also be generated by loading the orthopoly library

package and using the syntax H(n,x).

be

To achieve the normalization condition chosen to be C2 = 2n/(√π n!). This

∞ −∞

P (ζ)

dζ

=

1,

the

constant

must

form is substituted into ψ and the

probability density P calculated and simpliﬁed with respect to the exponentials.

> psi:=subs(_C2=sqrt(2ˆn/(sqrt(Pi)*n!)),psi);

> P:=simplify(psiˆ2,exp);

P := e(−ζ2) H2enrm√iπtenH! (n, ζ)2 To plot the probability density for a given value of n, P is turned into an arrow operator with the unapply command.

> P:=unapply(P,n):

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

47

The probability distribution will now be explored for a speciﬁc n value, say n = 25. Let’s check that the right form of C2 was entered by integrating P (25) over the entire inﬁnite range of ζ. The answer should be 1, which it is.
> Prob:=int(P(25),zeta=-infinity..infinity); Prob := 1
Classically, the energy conservation statement for the harmonic oscillator is

1m v2

+

1 m ω2 x2

=

1m v2

+

1 ¯h ω ζ2

=

E

=

(n

+

1 ) h¯ ω,

2

2

2

2

2

√ where v is the speed. At the turning points v = 0, so that ζ = ± 2 n + 1.

A functional operator L is now formed for calculating the magnitude of the

classical turning point for a speciﬁed n value.

> L:=n->sqrt(2*n+1): Vertical lines are plotted at the two turning points along with P (25). A list of lists is used for each of the vertical line entries. These lines are dashed and colored blue, while the probability curve is a solid red curve.

> plot([[[L(25),0],[L(25),0.24]],[[-L(25),0],[-L(25),0.24]], P(25)],zeta=-9..9,numpoints=2000,linestyle=[3,3,1], color=[blue,blue,red],thickness=2,labels=["zeta","P"]);

P 0.2

0.1

–8 –6 –4 –2 zeta 2 4 6 8
Figure 1.10: Probability distribution for n = 25.
The resulting picture is shown in Figure 1.10. From the ﬁgure, we can see that the quantum oscillator has a non-zero probability of being outside the classical turning points. This probability is now calculated for n = 25. The integral is multiplied by 2, because there are two “tails” to the quantum distribution.
> Prob2:=evalf(2*int(P(25),zeta=L(25)..infinity)); Prob2 := 0.04506702177

48

CHAPTER 1. LINEAR ODES OF PHYSICS

The probability of being outside the classical range is about 0.045. A bizarre feature that occurs for odd values of n is that the probability of ﬁnding the particle at x = 0 (the center of the potential well) is 0. You are referred to Griﬃths for a more thorough discussion of the quantum oscillator. In that reference, the probability distribution is drawn for n = 100. It is a trivial task to change n in the above recipe and replot the probability distribution. Try it!

1.2.4 Going Green, the Mathematician’s Way
Colorless green ideas sleep furiously. Noam Chomsky, American linguistic scholar illustrating that grammatical structure is independent of meaning, Syntactic Structures, (1957)

Suppose that one desires to solve a nonhomogeneous Sturm–Liouville equation,

L[y(x)] ≡ d

dy p(x)

− q(x) y = f (x).

dx

dx

(1.11)

subject to S-L boundary conditions at x = a and b > a. The Green function

method [Zwi89] is to ﬁrst solve the corresponding Green function ODE,

L[G(x|z)] = δ(x − z), with a < (x, z) < b,

(1.12)

subject to the same boundary conditions, for the Green function G(x|z). Then

the solution to (1.11) is given by

b
y(x) = G(x|z) f (z) dz.

(1.13)

a

The Green function approach, which is related ([SR66]) to the variation of pa-

rameters method, can be applied to other linear nonhomogeneous ODEs besides

the S-L equation. More importantly, it can be generalized to handle nonhomo-

geneous PDEs such as the nonhomogeneous wave and diﬀusion equations.

Here’s an introductory Green function method problem that I have often

assigned over the years in my mathematical physics course. The idea for it,

as well as for others, sprang from a table of Green functions that I stumbled

across while scanning through an old mathematical physics text by Margenau

and Murphy [MM57]. Some of these older books on mathematical techniques

for scientists are gold mines of useful information. Now to the problem.

Explicitly determine the Green function corresponding to the ODE,

x y + y − n2/x = f (x),

(1.14)

where n is a positive (non-zero) integer and the boundary conditions are that y(0) must remain ﬁnite and y(1) = 0. If n = 1 and f (x) = −x2 for 0 ≤ x ≤ 1/2 and f (x) = −(1 − x)2 for 1/2 ≤ x ≤ 1, use this Green function to explicitly
determine y(x) and plot the result.

The solution is as follows. First let’s note that x y + y = (x y ) , so that the ODE is a nonhomogeneous S-L equation with p(x) = x and q(x) = n2/x.

Now the ODE for the Green function is entered.

> restart:

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

49

> ode:=x*diff(G(x),x,x)+diff(G(x),x)-nˆ2*G(x)/x=Dirac(x-z);

d2

d

n2 G(x)

ode

:=

x

( dx2

G (x))

+

( dx

G (x))

−

x

= Dirac(x − z)

The general solution of the ODE is obtained, assuming that x < z. The general

solution for x > z is of a similar mathematical structure.

> sol:=rhs(dsolve(ode,G(x))) assuming x<z;

sol := C1 x(−n) + C2 xn
The Green function must satisfy the same boundary conditions as the solution of the original equation. For x < z, we must have GL remain ﬁnite at x = 0. Since n is a non-zero, positive integer, the term x−n must be removed from sol to form GL.

> GL:=remove(has,sol,xˆ(-n)); GL := C2 xn
In some executions of the recipe, the coeﬃcient C1 appears in the above output instead of C2. To avoid diﬃculty with the solve command later, let’s introduce our own coeﬃcient C by using the operand command to extract the second operand (xn) in GL and multiply it by C.

> GL:=C*op(2,GL); GL := C xn
To form GR for x > z, let’s substitute C1 = A and C2 = B in sol .

> GR:=subs({_C1=A,_C2=B} sol);

GR := A x(−n) + B xn To satisfy the bc at x = 1, GR is evaluated at that point and set equal to zero.

> eq1:=eval(GR,x=1)=0;

eq1 := A + B = 0 At x = z, we have the continuity condition, GL = GR .

> eq2:=eval(GL=GR,x=z);

eq2 := C zn = A z(−n) + B zn There is a discontinuity in slope at x = z, given by GR(z)−GL(z) = 1/p(z) = 1/z.
> eq3:=eval(diff((GR-GL),x),x=z)=1/z;

A z(−n) n B zn n C zn n 1

eq3 := −

+

−

=

z

z

z

z

The set of three equations (eq1 , eq2 , eq3 ) are solved for the set of three coeﬃ-

cients (A, B, C) and the solution sol2 is assigned.

> sol2:=solve({eq1,eq2,eq3},{A,B,C}); assign(sol2):

sol2 :=

B

=

1 2 z(−n) n ,

C

=

−z(−n) + zn 2 zn z(−n) n ,

A

=

1 − 2 z(−n)

n

On simplifying GL and GR, the Green function is completely determined.

50

CHAPTER 1. LINEAR ODES OF PHYSICS

> GL:=simplify(GL); GR:=simplify(GR);

xn (zn − z(−n)) GL :=
2n

zn (xn − x(−n)) GR :=
2n

Using the piecewise command, the Green function can be written as a single

function G, which displays the general symmetry property G(x|z) = G(z|x).

> G:=piecewise(x<=z,GL,x>=z,GR);

⎧ ⎪⎨

xn

(zn

−

z(−n))

G

:=

⎪⎩

zn

2n (xn − x(−n))

2n

x≤z z≤x

To continue with the solution, GL and GR are evaluated at n = 1,

> GL1:=eval(GL,n=1); GR1:=eval(GR,n=1);

x (z

−

1 )

GL1 :=

z

2

z

(x

−

1 )

GR1 :=

x

2

and the function f (z) entered as the two pieces f1 and f2 .

> f1:=-(zˆ2): f2:=-(1-z)ˆ2: Now the integration in (1.13) has to be carried out. The integration is slightly tricky because both G and f are piecewise functions. For x < 1/2, we have

x

1/2

1

y1 = GR f 1 dz +

GL f 1 dz + GL f 2 dz.

0

x

1/2

This integration is now carried out and the result simpliﬁed.

> y1:=simplify(int(f1*GR1,z=0..x)+int(f1*GL1,z=x..1/2)
+int(f2*GL1,z=1/2..1)); y1 := 1 x (−6 x2 − 13 + 24 ln(2)) 48
Similarly, the integration for x ≥ 1/2 is performed and simpliﬁed.

> y2:=simplify(int(f1*GR1,z=0..1/2)+int(f2*GR1,z=1/2..x)

+int(f2*GL1,z=x..1)) assuming x>0;

y2 := − 1 1 + 25 x2 + 6 x4 − 32 x3 + 24 x2 ln(x)

48

x

The complete solution y to the given nonhomogeneous ODE is pieced together,

> y:=piecewise(x<=1/2,y1,x>=1/2,y2);

⎧ ⎪⎨

1

x (−6 x2 − 13 + 24 ln(2))

y

:=

⎪⎩

48 −1

25 x2 + 1 + 6 x4 − 32 x3 + 24 x2 ln(x)

48

x

and plotted over the range x = 0 to 1.

x≤ 1 2

1 2

≤

x

> plot(y,x=0..1,thickness=2,labels=["x","y"]); The resulting proﬁle is shown in Figure 1.11, thus ﬁnishing the problem.

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

51

0.02
0.015 y
0.01
0.005

0

0.2

0.4 x 0.6

0.8

1

Figure 1.11: Solution of the given nonhomogeneous S-L equation.

1.2.5 In Search of a More Stable Existence
If you pick up a starving dog and make him prosperous, he will not bite you. This is the principal diﬀerence between a dog and a man. Mark Twain, Pudd’nhead Wilson, ch. 16, (1894)

Not all LODEs, even if they are of the S-L type, are readily solved in terms of either elementary or special functions. In this case, one can easily generate a numerical solution using the numeric option of the dsolve command. To illustrate this approach, consider the following mechanics example.
A particle of mass m is fastened to the origin by a spring obeying Hooke’s law whose spring constant is k(t) = k0 sin(ω t). The mass is constrained to move on a straight line through the origin. A critical frequency ωcr exists such that for ω < ωcr the motion is unstable (displays unbounded growth as time evolves), but is stable (bounded motion) for all frequencies above ωcr. Setting r = ω m/k0, determine the critical value rcr corresponding to ω = ωcr and plot representative solutions for r just below and just above rcr. Take the initial displacement to be x(0) = 1 and the initial velocity to be x˙ (0) = 0.1.
Applying Newton’s second law, the relevant LODE (dots indicating time derivatives with respect to the time variable τ ) is

m x¨(τ ) + k0 sin(ω τ ) x(τ ) = 0.

(1.15)

Introducing the dimensionless time variable t = ( k0/m) τ , Equation (1.15) can be rewritten (dots now indicating time derivatives with respect to t) as

x¨(t) + sin(r t) x(t) = 0.

(1.16)

After loading the plots package, a functional operator ode is formed for generating Equation (1.16) for diﬀerent input values of r.
> restart: with(plots):

52

CHAPTER 1. LINEAR ODES OF PHYSICS

> ode:=r->diff(x(t),t,t)+sin(r*t)*x(t)=0;
d2 ode := r → ( dt2 x (t)) + sin(r t) x (t) = 0 The initial condition is entered and an unsuccessful attempt (no output is generated) is made to analytically solve the ODE for arbitrary r.
> ic:=x(0)=1,D(x)(0)=0.1:
> dsolve({ode(r),ic},x(t)); An arrow operator sol is now created to ﬁnd a numerical solution of the ODE for a speciﬁed value of r. To achieve this, the option numeric8 is included in the dsolve command line. The output=listprocedure option gives the output as a list of equations of the form variable=procedure, where the lefthand sides are the names of the independent variable, the dependent variable(s) and derivatives, and the right-hand sides are procedures that can be used to compute the corresponding solution components. This output form is most useful when the returned procedure is to be used later as will be the case here.
> sol:=r->dsolve({ode(r),ic},x(t),numeric,output=listprocedure): Using sol, a “do loop” is introduced for carrying out the repetitive numerical calculation of x(t) at a speciﬁc time for systematically increasing values of r. The general syntax for this common programming structure is:
for name from expression by expression to expression while expression do statement sequence; end do: The statement sequence is the main body of the do loop giving the steps to be followed in the calculation. In the following opening line of the do loop,
> for i from 1 to 200 do name is the index i, the ﬁrst expression is 1, the by expression is absent, the third expression is 200, and there is no conditional while expression present. Since the by expression is missing, the default is to increment i by 1 each time the statement sequence is executed.
The statement sequence is now explained. Using sol, the following command line evaluates x(t) at arbitrary time t for r = i/100. Since i runs from 1 to 200, r will be incremented in steps of 0.01 from 0.01 to 2.00. The concatenation operator || is used in assigning the ith result the name X||i. This operator attaches the numbers 1 to 200 to X, so that the outputs are assigned the names X1 ,X2 ,..., X200 . Concatenated names are useful for employing in the sequence (seq) command.
> X||i:=eval(x(t),sol(i/100)); Then each X||i is evaluated at t = 150, the result being labeled Y||i.
> Y||i:=X||i(150); A large time has been chosen so that it will be easy to distinguish between the unstable solutions which should have grown to large amplitudes and the stable
8The default numerical method is the Runge–Kutta–Fehlberg 45 ([BF89]) method (discussed in the Desserts). Other schemes are listed in the Maple Help under “dsolve,numeric”.

1.2. LINEAR ODES WITH VARIABLE COEFFICIENTS

53

solutions which remain bounded. The do loop is now ended, the output being suppressed with a line-ending colon.
> end do: To plot the numerical output, 200 plotting points (pts) are formed using the sequence command. The abscissa of the ith point is given by i/100, with i running from 1 to 200. This generates the r values. Since the Y ||i for the unstable solutions are extremely large, the log is taken of the absolute value of the Y||i to form the ordinate values. For each plotting point, the abscissa and ordinate values are put into a Maple list format.
> pts:=seq([i/100,log(abs(Y||i))],i=1..200): Choosing a suitable view, the points are now plotted, the default being to join consecutive points with a straight line. The result is shown in Figure 1.12.
> plot([pts],view=[0.01..2,-10..70],tickmarks=[4,3], labels=["r",""]);

60 40 20

0

0.5

1 r 1.5

2

Figure 1.12: Log of the absolute value of x(t = 150) versus r.

Remembering that the vertical scale is logarithmic, we can see that the region of instability persists until r reaches slightly less than 1.5, then stability sets in for larger r. That is to say rcr 1.5. More precisely, looking at the numerical output, rcr lies between 1.48 (unstable) and 1.49 (stable).
The odeplot command may be used to plot the numerical solution of an ODE. An arrow operator gr is formed to apply this command to sol(r) for a given r value. x(t) is plotted against the time t, the time range being from 0 to 150. To obtain an accurate curve, 2000 plotting points are chosen.
> gr:=r->odeplot(sol(r),[t,x(t)],0..150,numpoints=2000,
thickness=2,tickmarks=[3,3]): Then entering gr(1.48) produces the ﬁgure shown on the left of Figure 1.13, while gr(1.49) generates the ﬁgure on the right.
> gr(1.48); gr(1.49);

54
10000 x 0
–10000

CHAPTER 1. LINEAR ODES OF PHYSICS

50 t 100

x 10 150 0

–10

t

50

100

150

Figure 1.13: Left: Unstable solution for r = 1.48. Right: Stable for r = 1.49.
For r = 1.48 ever-growing oscillations occur, indicative of instability, while for r = 1.49 the oscillations remain bounded in amplitude, a sign of stability.
The motion of the particle along the x-axis for, e.g., r = 1.49 can now be animated. The coordinates C (expressed as a list with the vertical coordinate equal to 0) of the particle at arbitrary time t are evaluated using sol(1.49). Then, e.g., the coordinates at time t = 100, are obtained9 by entering C(100).
> C:=eval([x(t),0],sol(1.49)): C(100); [1.52446967145678580, 0]
An operator gr2 is formed to plot a size 20 blue circle at coordinates C(i).
> gr2:=i->plot([C(i)],style=point,symbol=circle, symbolsize=20,color=blue,labels=["x"," "]):
The command seq(gr2(i),i=0..250) plots graphs for t = i = 0, 1, 2, ...250. Displaying this sequence with the option insequence=true generates a picture which is animated by clicking on the computer plot and then on the start arrow.
> display(seq(gr2(i),i=0..250),insequence=true, tickmarks=[3,3]);
1.3 Supplementary Recipes
01-S01: Newton’s Law of Cooling Newton’s law of cooling is governed by the ODE, T˙ = −k (T − T s), where T is the temperature of an object at time t, k is the positive cooling constant, and T s is the temperature of the object’s surroundings. If T (0) = T 0, determine T (t > 0). What information does including infolevel[dsolve]:=2: provide?
9Note that the numeric option of the dsolve command yields more digits in the output than the “standard” default of 10 digits.

1.3 SUPPLEMENTARY RECIPES

55

A horseshoe is originally 100 ◦C hotter than the surrounding air. After 15 minutes, the temperature diﬀerence has fallen to 60 ◦C. How long will it take for the horseshoe to reach a temperature 10 ◦C above the surrounding air?
01-S02: Charging a Capacitor A capacitor C is connected in series with a resistor R and a voltage source V = V0(t/τ )2e−t/τ , where τ is a characteristic time.
(a) Making use of Ohm’s law for the voltage drop across R and Kirchoﬀ’s voltage sum rule, derive the ODE for the charge q(t) on C at time t. Then, analytically solve the ODE for q(t), given that q(0) = 0.
(b) Taking R = 5 ohms, C = 2 farads, V0 = 3 volts, and τ = 1 second, plot q(t) for t = 0 to 20 seconds. At what time is q(t) a maximum and what is the maximum charge? Answer this ﬁrst qualitatively by clicking the mouse cursor on the maximum, and then quantitatively.
01-S03: Radioactive Chain An important radioactive chain involves the disintegration of the unstable 238U nucleus. It decays via α-emission into 234Th, which in turn β-decays into 234Pa, and so on until the stable isotope 206Pb is created. The decay rates of the ﬁrst three species (N is the number of atoms and λ the decay constant) in a radioactive chain at time t can by described by
N˙ 1 = −λ1N1, N˙ 2 = λ1N1 − λ2N2, N˙ 3 = λ2N2 − λ3N3.
(a) If N1(0) = N , N2(0) = 0, and N3(0) = 0, determine N1(t) N2(t), and N3(t).
(b) The λ values for the uranium chain are vastly diﬀerent, so for plotting purposes consider a hypothetical radioactive chain for which N = 1000, λ1 = 1, λ2 = 2, and λ3 = 3. Plot N1(t) N2(t), and N3(t) in the same ﬁgure for t = 0..5 using diﬀerent colors and line styles for each curve. At what time is N3 a maxima? What is N3 at this time?
01-S04: Stokes and Newton Join Forces The drag force ([FC99]) on a sphere of diameter d moving with speed v is, in general, given in SI units by Fdrag = −a v − b v2, with a = 1.55 × 10−4d and b = 0.22 d2. I.e., it is a combination of Stokes’s and Newton’s resistance laws
(a) A spherical mass m is dropped from rest. Derive and solve the relevant nonlinear ODE for v(t). What method does Maple use to solve the ODE?
(b) A basketball (d = 0.25, m = 0.60), a raindrop (d = 10−4, m = 0.52 × 10−9), and a soap bubble (d = 10−2, m = 10−7 ), are all dropped from rest. Taking the gravitational acceleration g = 9.8 m/s2, determine v(t) for each body.
(c) Plot each v(t), showing the approach to the terminal velocity V . Determine V for each body and the time it takes to come within 1% of V ?
01-S05: Exploring the RLC Series Circuit (a) Derive the ODE for a series circuit consisting of a resistor R, an inductor L, and a capacitor C and cast it into the form q¨ + 2 α q˙ +√ω2 q = 0, where q(t) is the charge on C at time t, α = R/(2 L) and ω = 1/ L C.

56

CHAPTER 1. LINEAR ODES OF PHYSICS

(b) Given q(0) = A, q˙(0) = B, solve the ODE for overdamping (α > ω), underdamping (α < ω), and critical damping (α = ω). What fact does Maple use in successfully arriving at each solution? Calculate the currents.
(c) Taking A = −1, B = 2, ω = 1, α = α1 = 1/5, and α = α2 = 2, evaluate q(t) and the currents for the three cases. Plot the q(t) together using diﬀerent colors and linestyles for each case. Do the same for the currents.

01-S06: The Whirling Bar Revisited Suppose that the rotating bar of recipe 01-1-3 has hinged-end (y and y (the bending moment) are both zero) boundary conditions at each end. Obtain the ﬁrst four critical frequencies and corresponding shapes and plot the latter in a single ﬁgure. Compare the lowest critical frequency to that in 01-1-3.

01-S07: Driven Couple Oscillators Masses m1 and m2, with equilibrium positions at x = 1 and x = 5, are free to move horizontally on a smooth surface (the x-axis). m1 is connected to a ﬁxed wall on its left by a linear spring (spring constant k) and on its right to m2 with an identical spring. A driving force F = f sin(ω t) acts to the right on m2. Air resistance is present, given by Stokes’s drag law, Fdrag = −a v.
(a) Derive the governing ODEs for the displacements x1(t) and x2(t) of m1 and m2 from equilibrium. Taking m1 = 2, m2 = 1, k = 1, a = 1/100, ω = 2, f = 2, x1(0) = 1/10, x2(0) = 0, x˙ 1(0) = 0, and x˙ 2(0) = 0, solve the ODEs using the Laplace transform option. Express x1(t) and x2(t) in real forms.
(b) Extract the steady-state parts of x1 and x2 and plot them. Discuss the results. Plot the transient expressions over a time interval for which the transients become small. This will reveal the envelope of the transients.
(c) Animate the motion of m1 and m2 about their equilibrium positions over a time interval for which the transients become small.

01-S08: Some Properties of the Delta Function

(a)

Two

common

representations

of

the

δ

function

are

G(x)

=

√ (α/ π)

e−α2

x2

and F (x) = sin(α x)/(π x) with α → ∞. Conﬁrm that these representa-

tions are reasonable by (i) plotting G(x) and F (x) for increasing α,

(ii) showing that

∞ −∞

G(x)

dx = 1

and

∞ −∞

F

(x)

dx =

1

for

α

>

0.

(b)

Using Dirac(x-a), conﬁrm the

(ii) (iv)

−∞ −∞∞∞fδ((xb()xδ(−x

− a) dx = f (a), a)) dx = 1/|b|.

following:

(iii)

∞ −∞

(i) f (x)

∞ −∞

δ(x

−

a)

δ (x − a) dx

dx = 1, = −f (a),

(c) Using the command Heaviside(x), create a rectangle h(x) of unit height

and with edges at x = ±1. Plot h(x) for x = −3 to 3, using constrained

scaling. Diﬀerentiate h(x) with respect to x and interpret the result.

01-S09: A Green Function Derive the Green function G which is the solution to G + k2 G = −δ(x − ζ), subject to the boundary conditions G(−1) = G(1) and G (−1) = G (1). Simplify

1.3 SUPPLEMENTARY RECIPES

57

G as much as possible and write it as a piecewise function. Check that G obeys the general symmetry property G(x|ζ) = G(ζ|x). At what k values does G have singularities where G diverges?

01-S10: A Potpourri of General Solutions Classify the following LODEs as to order, homogeneneous or nonhomogeneous, and constant or variable coeﬃcients. Obtain the general solution for each and identify which part of the solution is the particular solution and which part is the solution to the corresponding homogeneous ODE. Identify any non-elementary functions in the solution. What method of attack does Maple use?

(a) x y + (1 + x) y = ex;

(b) y + x y = 0;

(c) y + 3 y + 2 y = ex;

(d) x2 y − 6 y = x3 ln x;

(e) y

− (3/x) y

+

(15/(4

x2)

+

√ x)

y

=

0;

(f ) x2 y + (1 − 2 α) x y + (k2 β2 x2 β + (α2 − p2 β2)) y = 0.

01-S11: Ch√ebyshev Polynomials√ Taking p = 1 − x2, q = 0, w = 1/ 1 − x2, and λ = n2, show that the S-L

ODE yields the Chebyshev equation, (1 − x2) y − x y + n2 y = 0. For n a

non-negative integer, Chebyshev’s ODE is known to have polynomial solutions

(the Chebyshev polynomials Tn(x)) deﬁned over the range x = −1 to +1. Using

the command expand(ChebyshevT(n,x)), generate the Tn(x) for n = 0 to 10.

Then use the dsolve command to obtain the general solution of the Chebyshev

ODE and show that it can be expressed in terms of the Tn(x). Demonstrate

that, e.g.,

1 −1

T9(x)

T10(x)

w(x)

dx = 0,

i.e.,

the

Chebyshev

polynomials

form

a

set of orthogonal functions. Plot the ﬁrst ﬁve polynomials for x = −1 to 1.

01-S12: The Growing Pendulum Consider a pendulum which consists of a point mass m at the bottom end of a light supporting rod of length L which is allowed to move in a vertical plane about a pivot point at its top end. Suppose that L increases at a steady rate, i.e., L = L0 + v t, where v > 0 is a constant speed and t the time.
(a) Letting the rod make an angle θ(t) with the vertical and neglecting drag, use Newton’s second law for angular motion (d(I ω)/dt = T , where I is the moment of inertia, ω the angular velocity, and T the torque) to derive the LODE for small θ. Solve the ODE for θ(t), given θ(0) = Θ, θ˙(0) = 0. Simplify θ(t) and identify the functions which occur.
(b) Taking L0 = 1 m, g = 10 m/s2, Θ = π/6 rads, and v = 0.5 m/s, plot θ(t) for t = 0 to 100 seconds. Describe the behavior of the period. Then animate the motion of the pendulum arm (representing it as a thick line) over this time interval taking 100 frames and using constrained scaling.

58

CHAPTER 1. LINEAR ODES OF PHYSICS

01-S13: Another Green Function
Assuming that m = 0, derive the Green function G which is the solution to (1 − x2) G − 2 x G − m2 G/(1 − x2) = δ(x − z), subject to the boundary conditions that G remains ﬁnite at the end points x = ±1 of the range. Simplify G as much as possible and write it as a piecewise function. Plot G over the range x = −1 to 1, taking m = 3 and z = 1/2.

01-S14: Going Green, Once Again

A light elastic string, under tension T and ﬁxed at x = ±L, is horizontal in the

absence of any applied forces. The string is embedded in an elastic membrane

which exerts a Hooke’s law (spring constant k) restoring force if the string is displaced from equilibrium. If a force f e−β x2 is applied to the string, derive

the ODE for its shape y(x), assuming that y(x) is small. Using the Green

feurfn(czt)io≡n(2m/e√thπod0x,

determine y(x). The answer will involve e−t2 dt. Check your result by solving the

the error function, original ODE with

Maple’s dsolve command, subject to the given boundary condition. Taking

T = 100 N, k = 10 N/m, L = 1 m, β = 1/100 m−2, and f = 50 N, plot y(x).

Chapter 2

Applications of Series

In this chapter, it is assumed that you are already familiar with the basic concepts of inﬁnite series covered in standard calculus texts such as Calculus by James Stewart [Ste87]. The emphasis here is on applications of series, the topics being Taylor series, series solutions of LODEs, Fourier series, Legendre and Bessel series, and summing series. Laurent series are covered in Chapter 5.
2.1 Taylor Series

The Taylor expansion of a function f (x) = f (x0 + h) about x0 is given by

f (x) = f (x0) + h f

(x0) +

1 h2 f 2!

(x0)

+

1 h3 3!

f

(x0) + · · · .

(2.1)

Thus, e.g., taking x0 = 0, so h = x − x0 = x,

x3 x5 x7 sin(x) = x − + − + · · · =
3! 5! 7!

∞
(−1)n

x2n+1

≡

(2n + 1)!

∞

un.

n=0

n=0

Applying the ratio test, r ≡ |un+1/un| = x2/((2n + 3)(2n + 2)) → 0 as n → ∞. Since r < 1, the series converges for all x, i.e., the radius of convergence is ∞.

The extension to functions of more than one variable is straightforward, e.g.,

for a function f (x, y) = f (x0 + h, y0 + k), the Taylor series is of the form,

∂∂

1

∂

∂2

f (x, y) = f (x0, y0)+

h +k ∂x ∂y

f (x0, y0)+ 2!

h +k ∂x ∂y

f (x0, y0)+· · · .

2.1.1 Polynomial Approximations

Every man sees in his relatives, and especially in his cousins, a series of grotesque caricatures of himself. H. L. Mencken, American journalist, (1880–1956)

In this recipe, I will demonstrate how the Taylor series expansion may be used
to obtain the smallest polynomial approximation to the integral
x
f = u4 eu2 du, valid within ±0.000001 over the range 0 ≤ x ≤ 1.
0

60

CHAPTER 2. APPLICATIONS OF SERIES

The desired accuracy A is entered, and then the integral f is displayed and evaluated in the following command line.

> restart: A:=0.000001:

> f:=Int(uˆ4*exp(uˆ2),u=0..x)=int(uˆ4*exp(uˆ2),u=0..x);

f :=

x
u4 e(u2) du

=

1

x3 e(x2)

−

3

x e(x2)

−

3

I

√ π erf(x I)

0

2

4

8

√

The answer is√given in terms of the error function, erf(z) = (2/ π)

z 0

e−u2

du,

with z = I x = converting the

−1 rhs

x. to

aTnheimreasguinltacraynerbreorexfpurnecstsieodn,inertﬁe(rxm)s=o(f2r/e√alπq)ua0nxteiuti2edsub.y

> f:=convert(rhs(f),erfi);

f

:=

1

x3

e(x2)

−

3

x e(x2)

+

3

√ π

erﬁ(x)

2

4

8

Then f is simpliﬁed by collecting exponential terms.

> f:=collect(f,exp);

f

:=

1 (

x3

−

3

x) e(x2)

+

3

√ π erﬁ(x)

2

4

8

Although f can be evaluated numerically, a polynomial approximation to f is

now obtained. An operator F is formed which Taylor expands f in powers of x about x = 0, dropping terms of order xN+1.

> F:=N->taylor(f,x=0,N+1): A second arrow operator F2 is created to remove the order of term in the series.

> F2:=N->convert(F(N),polynom): Using F2(2*n+1), a sequence of polynomial approximations to the integral is generated in T for n = 0 to 10 (not all polynomials are shown here). Note that the Taylor series expansion of the integral generates only odd order polynomials, hence the argument 2 n + 1. For plotting purposes, T is assigned.

> T:=seq(t||(2*n+1)=F2(2*n+1),n=0..10); assign(T):

T

:= t1

= 0, t3

= 0, t5

=

x5 , t7

=

1 x5 + 1 x7, t9

=

1 x5 + 1 x7 +

1

x9,

5

57

5 7 18

t11 = 1 x5 + 1 x7 + 1 x9 + 1 x11, ............................................................, 5 7 18 66

t21 = 1 x5 + 1 x7 + 1 x9 + 1 x11 + 1 x13 + 1 x15 + 1 x17 + 1 x19

5 7 18 66

312

1800

12240

95760

+ 1 x21 846720

The diﬀerence between the exact integral f and each polynomial for n = 2 (yielding t5 ) and 10 (yielding t21 ) is plotted over the range x = 0 to 1.

> plot([seq(f-t||(2*n+1),n=2..10)],x=0..1,view=[0..1,0..A],
axes=box,thickness=2); Since the diﬀerences turn out to be positive, the vertical view has been taken to be between 0 and A, the upper limit setting the desired accuracy. The sequence

2.1. TAYLOR SERIES

61

of diﬀerences is shown in Figure 2.1, the diﬀerence corresponding to n = 2 on the far left and that corresponding to n = 10 on the far right. Since the ﬁrst diﬀerence curve that remains completely within the vertical viewing range is the curve corresponding to n = 10, the smallest polynomial which is within the desired accuracy over the range x = 0 to 1 is given by t21 .
1e–06

8e–07

6e–07

4e–07

2e–07

0

0.2

0.4 x 0.6

0.8

1

Figure 2.1: Diﬀerences between exact integral and polynomial approximations.

2.1.2 Finite Diﬀerence Approximations
I’m not a teacher: only a fellow-traveler of whom you asked the way. I pointed ahead–ahead of myself as well as you. George Bernard Shaw, Anglo-Irish playwright (1856–1950)

Replacing ordinary and partial derivatives by their ﬁnite diﬀerence approxi-

mations (FDAs) is useful in numerically solving ODEs and PDEs as will be

illustrated in Chapter 9. These approximations are based on a Taylor series

approach. For example, an FDA to y (x) can be obtained by Taylor expanding

y(x ± h) about x for small h, viz.,

y(x ± h) = y(x) ± hy (x) + 1 h2y (x) ± 1 h3y (x) + O(h4),

2!

3!

(2.2)

where O(h4) indicates that terms of order h4 (and higher) are being neglected.

Forming the sum y(x + h) + y(x − h), and solving for y , yields the FDA,

y (x) = [y(x + h) + y(x − h) − 2y(x)]/h2 + O(h2).

(2.3)

Eq. (2.3), known as the central diﬀerence approximation to the second derivative, was easily derived by hand. However, a computer algebra approach can sometimes prove useful in deriving other FDAs as our mathematical physics student, I. M. Curious, will now illustrate in answering the following problem.

(a) Show that to O(h4) an alternate FDA to the second derivative is given by y (x) = [−y(x+2h)+16y(x+h)−30y(x)+16y(x−h)−y(x−2h)]/(12h2).

62

CHAPTER 2. APPLICATIONS OF SERIES

Taking 12 digits accuracy, plot the diﬀerence between the FDA and the exact y for y = x5.1 over the range x = 0.1 to 10 for h = 0.1 and h = 0.05. (b) Show that an FDA for fxxyy ≡ ∂ 4f (x, y)/∂x 2∂y 2 is given by
fxxyy = [f (x+h, y + k)+f (x − h, y+k)+f (x+h, y − k)+f (x − h, y − k) −2 (f (x+h, y)+f (x − h, y)+f (x, y+k)+f (x, y − k))+4 f (x, y)]/(h2k2),
and produce a 3-dimensional plot of the diﬀerence between the FDA and the exact fourth derivative for f = sin(x − y) e−x2 y2 . Take h = k = 0.05, 12 digits accuracy, and a plotting range x = −3...3, y = −3...3.

I. M. begins her recipe for part (a) by setting the accuracy to 12 digits.
> restart: Digits:=12: Noting that the wording of the problem implies that terms of order h6 have been dropped in the Taylor series, she creates an arrow operator t to Taylor expand y(x + a h) in powers of h about an arbitrary point x, dropping terms of O(h6). The order of term is removed by enclosing the taylor command with convert( ,polynom). The quantity a is an integer which must be supplied.
> t:=a->y(x+a*h)=convert(taylor(y(x+a*h),h,6),polynom): As a test, I. M. chooses a = 2 and generates the Taylor series for y(x + 2h).

> t(2); y(x + 2 h)

=

y (x)

+

2

D(y)(x)

h

+

2

(D(2))(y)(x)

h2

+

4

(D(3))(y)(x)

h3

3

+ 2 (D(4))(y)(x) h4 + 4 (D(5))(y)(x) h5

3

15

In the output, (D(4))(y)(x), for example, stands for the 4th derivative, y (x).

Making use of the operator t, the proposed FDA is entered in eq1 .

> eq1:=-t(2)+16*t(1)-30*t(0)+16*t(-1)-t(-2);

eq1 := −y(x + 2 h) + 16 y(x + h) − 30 y(x) + 16 y(x − h) − y(x − 2 h)
= 12 (D(2))(y)(x) h2 On the rhs of the output, only the second derivative term survives, all other terms up to O(h6) having canceled. Using the isolate command, the second derivative (entered as D[1,1](y)(x)) is isolated to the lhs of eq2 ,
> eq2:=isolate(eq1,D[1,1](y)(x));

eq2 := (D(2))(y)(x)

=

−1 12

y (x

+

2 h)

−

16 y(x

+

h)

+

30 y(x) h2

−

16 y(x

−

h)

+

y (x

−

2 h)

thus conﬁrming the FDA.

An arrow operator y is formed to evaluate y = x5.1 at an arbitrary x value.

So that the FDA can be evaluated for diﬀerent h values, the rhs of eq2 is turned

into a functional operator A, depending on h, using the unapply command.

> y:=x->xˆ5.1: A:=unapply(rhs(eq2),h): The exact y (x) is calculated and the FDAs generated for h = 0.1 and h = 0.05.

2.1. TAYLOR SERIES

63

> exact:=diff(y(x),x,x); approx1:=A(0.1): approx2:=A(0.05): exact := 20.91 x3.1
The diﬀerences between the FDAs approx1 and approx2 and exact are plotted for x = 0.1 to 10 as solid red and dashed green curves, respectively, the resulting plot being shown in Figure 2.2.
> plot([approx1-exact,approx2-exact],x=0.1..10,color= [red,green],thickness=2,linestyle=[1,3],tickmarks=[2,2]);

5

x

10

0

–5e–05

Figure 2.2: FDA minus the exact result for h = 0.1 (solid) and h = 0.05 (dashed).
As expected, the accuracy of the FDA is improved with the smaller value of h. Both curves have greatest accuracy over a limited range of x.
Now, I. M. tackles part (b) of the problem. The plots library package is loaded and 12 digits accuracy entered.
> restart: with(plots): Digits:=12: The FDA involves a Taylor expansion in two variables. I. M. uses the multivariate Taylor series command, mtaylor, to create an operator t for performing the expansion of f (x + ah, y + bk) in powers of h and k, neglecting terms of sixth order. mtaylor does not generate the order of term, so convert( ,polynom) needn’t be applied. Two integers a and b must be entered as arguments in t.
> t:=(a,b)->f(x+a*h,y+b*k)=mtaylor(f(x+a*h,y+b*k),[h,k],6): The given FDA is entered in eq1 .
> eq1:=t(1,1)+t(-1,1)+t(1,-1)+t(-1,-1) -2*(t(1,0)+t(-1,0)+t(0,1)+t(0,-1))+4*t(0,0);
eq1 := f (x + h, y + k) + f (x − h, y + k) + f (x + h, y − k) + f (x − h, y − k) − 2 f (x + h, y) − 2 f (x − h, y) − 2 f (x, y + k) − 2 f (x, y − k) + 4 f (x, y) = h2 k2 D1, 1, 2, 2(f )(x, y)

64

CHAPTER 2. APPLICATIONS OF SERIES

Only a single term involving D1, 1, 2, 2 results on the rhs of the output, the subscripts 1 and 2 denoting derivatives with respect to x and y, respectively. Dividing eq1 by h2k2, and simplifying, yields the desired FDA.
> eq2:=simplify(eq1/(hˆ2*kˆ2));
eq2 := (f(x + h, y + k) + f(x − h, y + k) + f(x + h, y − k) + f(x − h, y − k) − 2 f(x + h, y) − 2 f(x − h, y) − 2 f(x, y + k) − 2 f(x, y − k) + 4 f(x, y))/(h2 k2) = D1, 1, 2, 2(f )(x, y)
The function f (x, y) = sin(x − y) e−x2 y2 is entered, as well as h = k = 0.05.
> f:=(x,y)->sin(x-y)*exp(-xˆ2*yˆ2): h:=0.05: k:=0.05: The exact 4th derivative is calculated and the FDA given by the lhs of eq2 .
> exact:=diff(f(x,y),x,x,y,y); approx:=lhs(eq2): The plot3d command is used to create a 3-dimensional plot of approx minus exact for x = −3...3, y = −3...3. The grid is taken to be 25 ×25, the shading to be XYZ (i.e., the color varies in the 3 directions), the axes boxed, the plot “illuminated” with a light source at a certain orientation given by entering lightmodel=light2, the number of plotting points to be 2000, and the orientation speciﬁed. The resulting picture is shown in Figure 2.3.
> plot3d(approx-exact,x=-3..3,y=-3..3,grid=[25,25], shading=XYZ,axes=box,lightmodel=light2,numpoints=2000, tickmarks=[3,3,3],orientation=[20,40]);

0.4 0.2
0 –0.2 –0.4

–2

y0

2

–2 0x 2

Figure 2.3: Diﬀerence between FDA and exact 4th derivative.

The regions where the FDA and exact result diﬀer appreciably can be seen as a series of ridges and valleys. The 3-dimensional plot can be rotated on the computer screen by dragging with the mouse.

2.2. SERIES SOLUTIONS OF LODES

65

2.2 Series Solutions of LODEs

Consider an nth-order homogeneous linear ODE with variable coeﬃcients,

dny

dn−1y

dy

dxn + an−1(x) dxn−1 + · · · + a1(x) dx + a0(x) y = 0.

(2.4)

If a0(x), ..., an−1(x) are regular (single-valued and analytic) at a point x = x0,

then x0 is referred to as an ordinary point of the ODE. Near x0, the general

solution of the LODE can be written as a Taylor series, y =

∞ m=0

cm(x

−

x0)m,

whose radius of convergence is the distance to the nearest singular point (a

non-ordinary point) of the ODE. The coeﬃcients cm are found by substituting

the series into the ODE and setting the coeﬃcients of each power of x to zero.

If x0 is not an ordinary point, but (x − x0) an−1(x), (x − x0)2 an−2(x),...,

(x − x0)n a0(x) are regular at x0, then x0 is a regular singular point. Near such

an x0, a Frobenius series solution of the form y = (x − x0)s

∞ m=0

cm

(x

−

x0

)m

,

with c0 = 0 and s not necessarily an integer, can always be found. The radius

of convergence is again the distance to the nearest singular point outside x0.

In this section, series solutions to two familiar Sturm–Liouville ODEs are

obtained, illustrating the two types of expansions mentioned above.

2.2.1 Jennifer Renews an Old Acquaintance
We need two kinds of acquaintances, one to complain to, while to the others we boast. Logan Pearsall Smith, American essayist, Afterthoughts,“Other People”, 1931

In recipe 01-2-1, Jennifer introduced the Legendre functions. In this recipe, she renews her acquaintance with these important special functions, showing us how they arise as a series solution to the Legendre ODE,

(1 − x2) y − 2 x y + n (n + 1) y = 0.

(2.5)

Casting (2.5) into the “standard” form (2.4), Equation (2.5) has regular singular points at x = ±1. Jennifer seeks a Taylor series solution about the ordinary point x0 = 0. She decides that it will suﬃce for calculation purposes to work with a ﬁnite number of terms, say N = 7, in the series.

> restart: N:=7: The left-hand side of Legendre’s equation is now entered.

> ode:=(1-xˆ2)*diff(y(x),x,x)-2*x*diff(y(x),x)+n*(n+1)*y(x);

ode

:=

(1

−

x2)

d2 ( dx2

y (x))

−

2

x

d (
dx

y (x))

+

n

(n

+

1)

y (x)

The power series y(x) =

N m=0

cm

xm

is

inputted

using

the

add

command.

> y(x):=add(c||m*xˆm,m=0..N);

y(x) := c0 + c1 x + c2 x2 + c3 x3 + c4 x4 + c5 x5 + c6 x6 + c7 x7

y(x) is automatically substituted into ode and powers of x are collected.

66

CHAPTER 2. APPLICATIONS OF SERIES

> ode2:=collect(ode,x);

ode2 := (−56 c7 + n (n + 1) c7 ) x7 + (−42 c6 + n (n + 1) c6 ) x6 + (42 c7 − 30 c5 + n (n + 1) c5 ) x5 + (n (n + 1) c4 − 20 c4 + 30 c6 ) x4 + (−12 c3 + n (n + 1) c3 + 20 c5 ) x3 + (−6 c2 + 12 c4 + n (n + 1) c2 ) x2
+ (6 c3 + n (n + 1) c1 − 2 c1 ) x + 2 c2 + n (n + 1) c0 Since ode2 represents the lhs of the Legendre equation, it must be set equal to zero to form the complete equation. But x is arbitrary, so the coeﬃcient of each power of x must separately be equal to zero. A functional operator eq is created to set the coeﬃcient of xm in ode2 equal to zero.

> eq:=m->coeff(ode2,x,m)=0: The set of equations eq(m) is solved for the c||(m+2) for m = 0 to N − 2.
> sol:=solve({seq(eq(m),m=0..N-2)},{seq(c||(m+2),m=0..N-2)}): The solution sol is assigned, the coeﬃcients factored and the series formed,

> assign(sol): y:=add(factor(c||m)*xˆm,m=0..N): and the coeﬃcients of c0 and c1 collected in y.
> y:=collect(y,{c||0,c||1});

y := (1 − n (n + 1) x2 + n (n − 2) (n + 3) (n + 1) x4

2

24

−

n

(n

−

2) (n

−

4)

(n

+

5)

(n

+

3) (n

+

1)

x6 )c0

720

+ (x − (n + 2) (n − 1) x3 + (n − 1) (n − 3) (n + 4) (n + 2) x5

6

120

− (n − 1) (n − 3) (n − 5) (n + 6) (n + 4) (n + 2) x7 )c1 5040

y gives the ﬁrst few term in the general series solution of Legendre’s ODE.

It consists of an even (coeﬃcient of c0 ) and odd (coeﬃcient of c1 ) series in x. Noting that the denominator of the xm term is just m! (e.g., for m = 6,

6! = (6)(5)(4)(3)(2)(1) = 720), the structure of higher order terms in the inﬁnite

series is easy to deduce. In deriving y, Jennifer has mimicked a hand calculation.

The same result could be more easily obtained by using the series option in the dsolve command, as Jennifer will now demonstrate. She unassigns y and sets the order of the ﬁrst term to be neglected in the series solution. Since she has taken N = 7, the order here is 8, i.e., terms of O(x8) are dropped in the series. If the order is not speciﬁed, the default is to neglect terms of O(x6).

> unassign(’y’): Order:=N+1; Order := 8
Then ode is solved for y(x), subject to the initial condition y(0) = c0 and y (0) = c1 , using the series option in the dsolve command.
> Y:=dsolve({ode,y(0)=c||0,D(y)(0)=c||1},y(x),series);

2.2. SERIES SOLUTIONS OF LODES

67

The output (suppressed here in the text) contains the “order of” term O(x8) which is then removed from the rhs of Y using convert( ,polynom).
> Y:=convert(rhs(Y),polynom): Collecting the coeﬃcients of c0 and c1 yields a series solution Y equivalent to that obtained in y.
> Y:=collect(Y,{c||0,c||1});

Y

:= (1 − n (n + 1) x2

1 +(

n4 +

1

n3 −

5

n2 − 1 n) x4

2

24

12

24

4

+ (− 1 n6 − 1 n5 + 23 n4 + 17 n3 − 47 n2 − 1 n) x6)c0

720

240

720

240

360

6

1 + (x + (

−

1 n2 −

1 n) x3 + (−

13

n2 +

1

n4 +

1

n3 −

7

n

+

1 )

x5

36

6

120

120

60

60 5

41 +(

n4 −

1

n6 −

1

n5 +

29

n3 −

5

n2 −

37

n

+

1 )

x7)c1

5040

5040

1680

1680

63

420 7

Often, in cases of physical interest, x ≡ cos(θ) where the angle θ varies from

0 to π radians. So x then ranges from 1 to −1. It turns out that both series
diverge at x = ±1, unless n is a positive integer in which case the even or odd series in Y , or y, terminates with the power xn when n is even or odd. To

explicitly demonstrate this, Jennifer turns Y into an operator depending on n

with the unapply command,

> YY:=unapply(Y,n): and then uses a do loop to generate the solutions y0 ,y1 ,...,y5 for n = 0, 1, ..., 5

> for n from 0 to 5 do y||n:=YY(n); end do;

y0 := c0 + (x + 1 x3 + 1 x5 + 1 x7) c1

3

5

7

y1 := (1 − x2 − 1 x4 − 1 x6) c0 + c1 x

3

5

y2 := (1 − 3 x2) c0 + (x − 2 x3 − 1 x5 − 4 x7) c1

3

5

35

y3 := (1 − 6 x2 + 3 x4 + 4 x6) c0 + (x − 5 x3) c1

5

3

y4 := (1 − 10 x2 + 35 x4) c0 + (x − 3 x3 + 6 x5 + 2 x7) c1

3

5

7

y5 := (1 − 15 x2 + 30 x4 − 10 x6) c0 + (x − 14 x3 + 21 x5) c1

3

5

In y0 , the coeﬃcient of c0 is 1, which is just the zeroth order Legendre polyno-

mial P0(x), while the coeﬃcient of c1 involves the leading terms of an inﬁnite series. In y1 , the c0 coeﬃcient is an inﬁnite series, while the c1 coeﬃcient

is x, which is just the ﬁrst order Legendre polynomial P1(x). In y2 , the c0 coeﬃcient is proportional to P2(x), the coeﬃcient of c1 an inﬁnite series, and so on for increasing n values. Jennifer creates a functional operator F to extract

the coeﬃcient of either c0 (set p = 0) or c1 (set p = 1) for each solution yn.

68

CHAPTER 2. APPLICATIONS OF SERIES

> F:=(n,p)->coeff(y||n,c||p):
The Legendre polynomials Pn(x) are traditionally normalized so that each polynomial has the value 1 at x = 1. Making use of F(2*n,0) and including this normalization, the ﬁrst few even subscript Legendre polynomials are generated.

> Peven:=seq(P||(2*n)=F(2*n,0)/eval(F(2*n,0),x=1),n=0..2);

Peven

:=

P0

=

1,

P2

=

−1

+

3 x2 ,

P4

=

3

−

15

x2

+

35

x4

22

84

8

The odd subscript polynomials P1, P3, and P5 can be generated by replacing

F(2*n,0) with F(2*n+1,1) in the last command line.

The odd exponent inﬁnite series are similarly extracted by using F(2*n,1).

These are labeled Q0 , Q2 , Q4 for reasons which will now be explained.

> Qeven:=seq(Q||(2*n)=F(2*n,1),n=0..2);

Qeven := Q0 = x + 1 x3 + 1 x5 + 1 x7, Q2 = x − 2 x3 − 1 x5 − 4 x7,

3

5

7

3

5

35

Q4 = x − 3 x3 + 6 x5 + 2 x7

5

7

Each of the above inﬁnite series can be summed and are found to be proportional

to the Legendre functions Q0(x), Q2(x), Q4(x) of the second kind. Jennifer concludes her recipe by demonstrating, for example, that the Taylor expansion

of Q0(x) is the same as Q0 given above. The solution branch between x = −1

and 1 is selected by entering the following command.

> _EnvLegendreCut:=1..infinity: Then Taylor expanding LegendreQ(0,x) about x = 0, dropping terms of O(x8), and simplifying yields a series expansion for Q0 which agrees with that for Q0 .

> Q[0]:=simplify(LegendreQ(0,x)=taylor(LegendreQ(0,x),x=0,8));

Q0

:=

1 2

ln(x

+

1)

−

1 2

ln(1

−

x)

=

x

+

1 3

x3

+

1 5

x5

+

1 7

x7

+

O(x8)

In physical problems where x varies from −1 to 1, the Qn(x) must be rejected

because they diverge at the end points of the range.

2.2.2 Another Old Acquaintance

Acquaintance. A person whom we know well enough to borrow from, but not well enough to lend to. Ambrose Bierce, American author, The Devils Dictionary, (1842–1914)

After revisiting the Legendre functions, it’s not too surprising that Jennifer renews another old acquaintance, the Bessel functions, again showing how they arise as a series solution to Bessel’s equation (with p non-negative),

x2 y + x y + (x2 − p2) y = 0.

(2.6)

Putting (2.6) into the standard form (2.4), the second-order LODE has a regular

singular point at x = x0 = 0, so Jennifer will now seek a Frobenius power series

solution expanded about x = 0, viz., y =

∞ m=0

cm

xm+s.

The

total

number

N

2.2. SERIES SOLUTIONS OF LODES

69

of terms which will be kept in the series for plotting purposes is taken to be 100. The left-hand side of Bessel’s equation is entered in ode.

> restart: N:=100:

> ode:=xˆ2*diff(y(x),x,x)+x*diff(y(x),x)+xˆ2*y(x)-pˆ2*y(x);

ode

:=

x2

d2 ( dx2

y (x))

+

x

d (
dx

y (x))

+

x2

y (x)

−

p2

y (x)

For y(x), Jennifer enters the summand of the Frobenius series.

> y(x):=c[m]*xˆ(m+s);

y (x) := cm x(m+s) Noting that y(x) is automatically substituted into ode, ode is divided by xs and the result simpliﬁed. The resulting summand is given by the output of eq.

> eq:=simplify(ode/xˆs);

eq := cm xm m2 + 2 cm xm m s + cm xm s2 + x(2+m) cm − p2 cm xm

The sum

∞ m=0

over

the

ﬁve

terms

of

eq

is

to

be

set

equal

to

zero

which

implies

that the coeﬃcients of equal powers of x must also be equal to zero. Now all the

terms in eq involve xm, except for the fourth one which contains xm+2. But,

on summing, the fourth operand in eq can be transformed as follows,

∞

∞

∞

cm xm+2 =

cm−2 xm =

cm−2 xm.

m=0

m=2

m=0

(2.7)

if we agree to deﬁne c−1 = 0, c−2 = 0. Jennifer enters these coeﬃcient values.
> c[-1]:=0: c[-2]:=0: The transformation (2.7) can be accomplished in eq by using the subsop command to replace the 4th operand with cm−2 xm.
> eq2:=subsop(4=c[m-2]*xˆm,eq); eq2 := cm xm m2 + 2 cm xm m s + cm xm s2 + cm−2 xm − p2 cm xm
Now each term in eq2 involves xm. Dividing this equation by xm, equating the result to 0, and simplifying, yields a recurrence relation relating cm to cm−2.
> eq3:=simplify(eq2/xˆm)=0; eq3 := cm m2 + 2 cm m s + cm s2 + cm−2 − p2 cm = 0
Terms involving cm are now collected in the recurrence relation eq3 .
> eq4:=collect(eq3,c[m]); eq4 := (m2 + 2 m s + s2 − p2) cm + cm−2 = 0
Setting m = 0 in eq4 yields the so-called indicial equation, eq5 .
> eq5:=eval(eq4,m=0); eq5 := (s2 − p2) c0 = 0
Assuming that the coeﬃcient c0 = 0, eq5 has two solutions for s, which are explicitly extracted using the solve command. Jennifer will consider the series

70

CHAPTER 2. APPLICATIONS OF SERIES

solution (the second one in sol ) to Bessel’s equation corresponding to s = p. The other series solution is obtained by replacing p with −p.

> sol:=solve(eq5,s); s:=sol[2];

sol := −p, p s := p
Evaluating the recurrence relation eq4 for m = 1, and noting that for nonnegative p, 1+2 p can never be zero, it follows from eq6 below that the coeﬃcient c1 = 0. This coeﬃcient is extracted from eq6 with the solve command.
> eq6:=eval(eq4,m=1); c[1]:=solve(eq6,c[1]);

eq6 := (1 + 2 p) c1 = 0
c1 := 0 For m ≥ 2, one must work with the full recurrence equation eq4 . The recurrence relation can be rewritten by isolating the coeﬃcient cm on the left side of the equation and then factoring the result as in eq7 .

> eq7:=factor(isolate(eq4,c[m]));

eq7

:=

cm

=

− cm−2 m (m + 2 p)

The coeﬃcients c2 to cN = c100 are now explicitly evaluated by ﬁrst using

the unapply command to turn eq7 into a functional operator in terms of the

argument m and then using a do loop to iterate the recurrence relation.

> eq8:=unapply(eq7,m):

> for m from 2 to N do c[m]:=rhs(eq8(m)); end do:
Jennifer has used a command line ending colon to suppress the very long output. All the even subscript coeﬃcients are proportional to c0, while odd subscript coeﬃcients are proportional to c1 and therefore are all equal to zero.
To study the behavior of the series as more and more terms are retained, an arrow operator JJ is introduced to add the terms in the series for m = 0 to M .

> JJ:=M->add(c[m]*xˆ(m+s),m=0..M): Jennifer now calculates the sum Jp for M = 6 and collects the c0 coeﬃcients.
> Jp:=collect(JJ(6),c[0]);

Jp :=

xp − x(2+p) +

x(4+p)

−

x(6+p)

2 (2+2 p) 8 (2+2 p) (4+2 p) 48 (2+2 p) (4+2 p) (6+2 p)

c0

With the proper assignment (which will be done shortly) of the arbitrary coef-

ﬁcient c0, the inﬁnite series corresponding to Jp is the Bessel function Jp of the ﬁrst kind of order p. Not surprisingly, the same result could have been much

more easily obtained by using the series option of the dsolve command. To

demonstrate this, Jennifer now unassigns y(x). The order of the series is set as

well as the information level on the methods used in the dsolve command.

> unassign(’y(x)’): Order:=7: infolevel[dsolve]:=5: Jennifer replaces y(x) with z(x) in ode and obtains the general series solution of ode2. She has deleted some of the unsuccessful methods in the output.

2.2. SERIES SOLUTIONS OF LODES

71

> ode2:=subs(y(x)=z(x),ode): dsolve(ode2,z(x),series); .................................... dsolve/series/ordinary: trying Newton iteration dsolve/series/direct: trying direct subs dsolve/series/froben: trying method of Frobenius dsolve/series/froben: indicial eqn is -pˆ 2+rˆ 2 dsolve/series/froben: roots of indicial eqn are [[p], [-p]]

z (x) = C1 xp(1 − 1 x2 +

1

x4

4p+4

(8 p + 16) (4 p + 4)

−

1

x6 + O(x7))

(12 p + 36) (8 p + 16) (4 p + 4)

+ C2 x(−p)(1 + 1 x2 +

1

x4

4p−4

(8 p − 16) (4 p − 4)

+

1

x6 + O(x7))

(12 p − 36) (8 p − 16) (4 p − 4)

The method of Frobenius has been successfully used, the roots of the indicial

equation obtained, and the general series solution constructed for z(x). The

ﬁrst series, involving the arbitrary coeﬃcient C1, is exactly the same as in Jp.

The second series, involving the other arbitrary coeﬃcient C2, is the second

independent solution of the second order LODE obtained by replacing p with −p. I.e., the second independent solution is J−p(x).
This conclusion about the mathematical form of the second solution is true

providing that p is not zero or an integer. For p = 0, there is only one root,

s = 0, to the indicial equation and the second series is identical with the ﬁrst.

For integer values of p, all denominators in the second series beyond a certain

term vanish, so this series becomes meaningless. Thus for p = 0, 1, 2, ... a more

general second solution must be sought. Jennifer has decided not to go into

this issue here, referring her students to standard ODE texts which cover the

topic. At this stage it suﬃces to note that this second independent solution is

the Bessel function Yp of the second kind of order p. Returning to her “hand mimicking” calculation, Jennifer completes the iden-

tiﬁcation of the inﬁnite series solution as Jp(x) by making the “standard” choice for c0, viz. c0 = 1/(2p p!).

> c[0]:=1/(2ˆp*p!):
To see how may terms have to be retained in the series over a certain range of x, e.g., x = 0 to 50, to obtain a reasonably correct curve, Jennifer will now plot the sequence of results obtained from JJ for p = 0 and N/5 = 100/5 = 20, 40, 60, 80, and 100 terms along with the “exact” inﬁnite series result for J0(x). Because the ﬁnite series results diverge to ∞ before x = 50 is reached, the vertical view is limited to be between −1 and 1.

> plot([seq(eval(JJ(k*N/5),p=0),k=1..5),BesselJ(0,x)], x=0..50,thickness=2,numpoints=500,labels=["x","J"], tickmarks=[3,3],view=[0..50,-1..1]);

72
1 J 0

CHAPTER 2. APPLICATIONS OF SERIES

20 x

40

–1
Figure 2.4: Divergent curves from left to right: 20, 40, 60, 80, and 100 terms.
From left to right in Figure 2.4, the divergent curves represent the ﬁnite series representations of J0 for 20, 40, 60, 80, and 100 terms. The non-divergent oscillatory curve is the inﬁnite series representing the exact J0(x).

2.3 Fourier Series

Consider a single-valued function f (x) deﬁned over the fundamental interval

−L ≤ x ≤ L and satisfying the boundary conditions f (−L) = f (L). If f (x) has

a ﬁnite number of discontinuities and maxima and minima, and

L −L

|f (x)|

dx

is ﬁnite,1 then f (x) can be expanded in the Fourier series ([MW71], [Boa83])

1

∞

nπx

nπx

f (x) = 2 a0 +

an cos L + bn sin L ,

n=1

(2.8)

1L

nπx

1L

nπx

with

an = L

f (x) cos
−L

L

dx,

bn = L

f (x) sin
−L

L

dx.

The forms of an and bn can be derived from Equation (2.8) by noting that

yn(x) = cos(n π x/L) (or sin(n π x/L)) satisﬁes the orthogonality condition

L −L

w(x)

ym(x)

yn(x)

dx

=

0,

for

m

=

n,

with

w(x) =

1.

The identiﬁcation of

w(x) follows on noting that the yn(x) are solutions of y (x) + (n π/L)2y(x) = 0.

This equation is a Sturm–Liouville ODE, (1.6), with p = 1, q = 0, w = 1, and

λ = −(n π/L)2. The an and bn follow on multiplying (2.8) by cos(n π x/L) (or sin(n π x/L)), integrating from −L to L, and using the orthogonality condition.

If f (x) is an odd function, that is to say f (−x) = −f (x), then an = 0 and

bn = (2/L)

L 0

f (x)

sin(n

π

x/L)

dx,

so

f

(x)

is

expressed

as

a

Fourier

sine

series.

1These are suﬃcient, but not necessary, conditions.

2.3. FOURIER SERIES

73

On the other hand, if f (x) is an even function, i.e., f (−x) = f (x), then

an = (2/L)

L 0

f

(x)

cos(n

π

x/L)

dx

and

bn

=

0,

so

f

(x)

is

a

Fourier

cosine

series.

Since each term in (2.8) is periodic with period 2L, then f (x + 2L) = f (x).

Thus, the Fourier series may either represent an f (x) deﬁned in the fundamental

interval (−L, L), or a periodic f (x) with period 2L for all of x.

When f (x) is deﬁned only in the range 0 to L, it can be written as a Fourier

sine series by including the range to −L to 0 and considering f (x) to be an odd

function about x = 0. Alternately, it can be written as a Fourier cosine series

by considering f (x) to be an even function about the origin. It may turn out

that one series ﬁts f (x) better than the other for a ﬁnite number of terms.

To this point, the fundamental interval has been taken to be 2L. This can

be easily changed. For example, consider f (t) deﬁned in the range t = 0 to T

and we want the fundamental interval to be T , not 2T . To accomplish this, set

x = t and L = T /2 in (2.8) and an and bn and change the range of the integrals from −T /2 ... T /2 to 0 ... T . In this case, the general Fourier expansion becomes

1

∞

2nπt

2nπt

f (t) = 2 a0 +

an cos T + bn sin T

,

n=1

(2.9)

2T

2nπt

2T

2nπt

with an = T 0 f (t) cos T dt, and bn = T 0 f (t) sin T dt.

Again, this series may be used to represent either a function deﬁned in the fundamental interval 0 to T or a periodic function whose period is T .

The concept of expanding a function f (x) in terms of sines and cosines can be extended to other special functions yn(x) satisfying a S-L type equation. If the yn(x) satisfy the same boundary conditions at a and b as f (x), then

f (x) = An yn(x),
n

with An =

b a

w(x) f (x) yn(x) dx

b a

w(x)

yn(x)2

dx

.

(2.10)

The functions yn(x) are said to form a complete set. Often, they are normalized

so that

b a

w(x)

yn(x)2

dx

=

1.

Since

they

have

the

orthogonality

property,

they

then satisfy the orthonormality condition

b
w(x) ym(x) yn(x) dx = δmn,
a

(2.11)

where δmn, the Kronecker delta, is deﬁned by δmn = 1 for m = n and 0 for m = n. As an example of expanding in terms of special functions, the Legendre–
Fourier series (or simply the Legendre series) is given by

∞

(2 n + 1) 1

f (x) = An Pn(x), with An = 2
n=0

f (x) Pn(x) dx.
−1

(2.12)

A mathematical example of this series is given in Recipe 02-3-3.

74

CHAPTER 2. APPLICATIONS OF SERIES

2.3.1 Madeiran Levadas and the Gibb’s Phenomenon
The idealist walks on tiptoe, the materialist on his heels. Malcolm de Chazal, French writer, (1902–81)

On the island of Madeira, water is transported from the mountains by a network of levadas (irrigation canals) which often cling to the mountain side with vertigo-inducing drop oﬀs and pass through pitch-black tunnels. This recipe is inspired by some interesting hikes that I have taken on Madeiran levada retaining walls. A levada retaining wall is described by the piecewise function f = (L + x)/2 for −L ≤ x ≤ −L/2, f = L/4 for −L/2 ≤ x < 0, and f = 0 for 0 < x ≤ L, with L = π. Determine the Fourier series representation of f (x) and plot it and f together. Calculate the cross-sectional area of the retaining wall using f (x) and then the Fourier series. Discuss the various results.
To simplify the command entries, let’s set X = π x/L.

> restart: X:=Pi*x/L: Using the inert Sum command, an operator F is formed to calculate the Fourier series, keeping N terms.

> F:=N->a[0]/2+Sum(a[n]*cos(n*X)+b[n]*sin(n*X),n=1..N);

F

:=

N

→

1 2

a0

+(

N

(an cos(n X) + bn sin(n X)))

n=1

The formal expressions for the coeﬃcients are entered using the inert form of

the integral command. In the outputs, X is replaced with π x/L.

> a[0]:=(1/L)*Int(f,x=-L..L);

1L

a0 := L

f dx
−L

> a[n]:=(1/L)*Int(f*cos(n*X),x=-L..L);

1L

nπx

an := L

f cos(
−L

L

) dx

> b[n]:=(1/L)*Int(f*sin(n*X),x=-L..L);

1L

nπx

bn := L

f sin(
−L

L

) dx

The value L = π is speciﬁed and the piecewise function f entered.

> L:=Pi: f:=piecewise(x<-L/2,(L+x)/2,x<0,L/4,x<L,0);

⎧ ⎪⎪⎨

π 2

+

x 2

x < −π 2

f

:=

⎪⎪⎩

π 4

x<0

0

x<π

The value of the coeﬃcient a0 is obtained.

> a[0]:=value(a[0]);

2.3. FOURIER SERIES

75

3π a0 := 16 The coeﬃcients an and bn can be simpliﬁed by assuming that n is an integer.
The “type match command” (::) is used in the assumption.

> a[n]:=simplify(value(a[n])) assuming n::integer;

an

:=

1 −2

(−1)n

− cos( π n ) 2
π n2

> b[n]:=simplify(value(b[n])) assuming n::integer;

πn

1

bn

:=

− 4

π n + 2 sin( π n2

2

)

The Fourier series is generated in FF , with N = 15. (Only the leading terms in

the output are shown here in the text.) You can increase the value of N , but

you might then wish to suppress the very lengthy output by putting a colon on

the end of the command line.

> FF:=value(F(15));

3 π 1 cos(x) 1 (π + 2) sin(x) 1 cos(2 x) 1

FF := + 32 2

π

−4

π

− 4 π − 8 sin(2 x)

1 +

cos(3 x) −

1

(3 π − 2) sin(3 x) −

1

sin(4 x) +

1

cos(5 x) + · · ·

18 π

36

π

16

50 π

Finally, the function f and the Fourier series FF are plotted over the range x = −L = −π to x = L = π, being represented by thick blue and red lines. The resulting picture is shown on the left of Figure 2.5.

> plot([f,FF],x=-L..L,color=[blue,red],thickness=2,axes=box);

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0

–3 –2 –1 0 1 x 2 3 –3 –2 –1 0 x 1 2 3

Figure 2.5: Left: Fourier series for N = 15 and f . Right: Series for N = 100.

76

CHAPTER 2. APPLICATIONS OF SERIES

The Fourier series oscillates around the exact f . The ﬁt can be improved (the size of the oscillations reduced) by increasing N . The plot on the right of Figure 2.5 shows the Fourier series result for N = 100. The overshoot in the vicinity of the step function at x = 0 persists, however, no matter how large an N is chosen. This is called the Gibbs’ phenomenon. Notice also in the left plot that the Fourier series curve passes approximately through the midpoint of the step. As N → ∞, the Fourier curve will pass exactly though the midpoint, a general property of Fourier series at step discontinuities.
The exact cross-sectional area of the retaining wall is calculated in Area1 by integrating f from x = −L = −π to π. The cross-sectional area is also calculated in Area2 by integrating the Fourier series FF over the same range.

> Area1:=int(f,x=-Pi..Pi); Area2:=int(FF,x=-Pi..Pi);

3 π2

3 π2

Area1 :=

Area2 :=

16

16

The two areas are identical. The “wiggles” in the Fourier series about the f

curve exactly cancel. You might like to conﬁrm that this is still true for N = 100.

2.3.2 Sine or Cosine Series?
I see it all perfectly; there are two possible situations – one can either do this or that. My honest opinion and my friendly advice is this: do it or do not do it – you will regret both. Søren Kierkegaard, Danish philosopher, (1813–55)

Consider the function f (x) = x for 0 ≤ x ≤ L/2 and f (x) = L − x for L/2 ≤ x ≤ L, with L = 1. Extending the range to −L ≤ x ≤ L, derive a Fourier sine series and a cosine series representation of f (x). Plot f (x) and the two series together and discuss the results.
The value of L is entered and, again for convenience, let’s set X = π x/L.

> restart: L:=1: X:=Pi*x/L: The function f is entered using the piecewise command.

> f:=piecewise(x<L/2,x,x<L,L-x);

f := x

1 x<
2

1−x x<1

An odd function f 1 is introduced which is the same as f for 0 ≤ x ≤ L, but is

equal to −f for −L ≤ x ≤ 0. f 1 will be used to generate the sine series.

> f1:=piecewise(x<-L/2,-(L+x),x<L/2,x,x<L,L-x);

⎧ ⎪⎪⎪⎨ −1 − x

x < −1 2

f1 := ⎪⎪⎪⎩ x 1−x

1 x<
2 x<1

2.3. FOURIER SERIES

77

An even function f 2 is introduced which is the same as f for 0 ≤ x ≤ L and symmetrical about the origin. f 2 is used to generate the cosine series.
> f2:=piecewise(x<-L/2,L+x,x<0,-x,x<L/2,x,x<L,L-x); To conﬁrm that f 1 and f 2 are odd and even extensions of f to the region x < 0, they are plotted as solid and dashed curves in Figure 2.6. For x > 0, the two curves are identical, and therefore indistinguishable.
> plot([f1,f2],x=-L..L,linestyle=[SOLID,DASH],thickness=2);

0.4

–1

x

1

–0.4

Figure 2.6: Solid curve, f 1. dashed curve, f 2.

For a given f , functional operators A, B and F are introduced to calculate the series coeﬃcients an and bn, and to produce the series out to N terms.

> A:=(f,n)->(1/L)*int(f*cos(n*X),x=-L..L);

A := (f, n) → 1

L
f cos(n X) dx

L −L

> B:=(f,n)->(1/L)*int(f*sin(n*X),x=-L..L);

1L

B := (f, n) →

f sin(n X) dx

L −L

> F:=(f,N)->A(f,0)/2+sum(A(f,n)*cos(n*X)+B(f,n)*sin(n*X),n=1..N);

F := (f, N ) → 1 A(f, 0) + ( N (A(f, n) cos(n X) + B(f, n) sin(n X))) 2
n=1
Taking N = 10, the Fourier sine and cosine series are produced in F1 and F2 .

> F1:=F(f1,10); F2:=F(f2,10);

4 sin(π x) 4 sin(3 π x) 4 sin(5 π x) 4 sin(7 π x) 4 sin(9 π x)

F1:=

π2

− 9

π2

+ 25

π2

− 49

π2

+ 81

π2

1 2 cos(2 π x) 2 cos(6 π x) 2 cos(10 π x)

F2:= − 4

π2

− 9

π2

− 25

π2

The two series are plotted along with f and shown on the left of Figure 2.7.

> plot([f,F1,F2],x=0..L,color=[blue,red,green],thickness=2);

78

CHAPTER 2. APPLICATIONS OF SERIES

0.5

0.02

0.01

0

x

1

–0.01

0

x

1

Figure 2.7: Left: f and the two series. Right: Solid, f − F1 . Dashed, f − F2 .

Even though N is not large, both series ﬁt f quite well, except near the apex of the triangle and, for the cosine series, near x = 0 and 1. To magnify the diﬀerence between the series results and f , the diﬀerences f − F1 and f − F2 are plotted as solid and dashed curves in the right graph of Figure 2.5.
> plot([f-F1,f-F2],x=0..L,linestyle=[1,3],thickness=2); The cosine series clearly ﬁts less well at the end points of the x range. Can you suggest why this is the case?
2.3.3 How Sweet This Is!
Few things are harder to put up with than the annoyance of a good example. Mark Twain, American author, Pudd’nhead Wilson, 1894
If you have calculated series expansions by hand, you know what a tedious task it can be to explicitly calculate a large number of terms in the series and then have to plot the results. By now, you should have gotten a clear idea that using computer algebra is the way to go in handling such problems. The following recipe for the Legendre–Fourier series is a particularly “sweet” example that derives a “beautiful” result very quickly.
Consider a step function, f (x) = 0 for −1 < x < 0 and f (x) = 1 for 0 < x < 1. Derive the Legendre–Fourier series for f and plot the series and f together over the range −1 < x < 1. Calculate the area between the x-axis and the series curve and compare with the exact result for f . Discuss the plot and area results.
> restart:

2.3. FOURIER SERIES

79

Functional operators A and F are formed to calculate the coeﬃcients An, and the Legendre series out to N terms, for a given function f .

> A:=(f,n)->((2*n+1)/2)*int(f*LegendreP(n,x),x=-1..1);

1

1

A := (f, n) → (2 n + 1) f LegendreP(n, x) dx

2

−1

> F:=(f,N)->sum(A(f,n)*LegendreP(n,x),n=0..N);

N
F := (f, N ) → A(f, n) LegendreP(n, x)

n=0
The given f is entered with the Heaviside(x) command and the LegendreFourier series calculated in F1 for N = 15.

> f:=Heaviside(x); F1:=F(f,15); f := Heaviside(x)

1 3x 7

11

F1 := + 2

4

− 16 LegendreP(3, x) + 32 LegendreP(5, x)

− 75 LegendreP(7, x) + 133 LegendreP(9, x) − 483 LegendreP(11, x)

256

512

2048

+ 891 LegendreP(13, x) − 13299 LegendreP(15, x)

4096

65536

This is a formidable looking series, which has been generated in three command lines. If I now wanted to see what the series looks like for, say N = 100, changing 15 to 100 in F1 and executing the command would generate the new result almost instantaneously.
How formidable the result really is, even for 15 terms, can be appreciated by expanding F1 . The sort command is used to order the polynomial expansion from the highest exponent to the lowest. Wow, what a result!

> F1:=sort(expand(F1));

F1 := − 128931743655 x15 + 503889568875 x13 − 800852700375 x11

134217728

134217728

134217728

+ 664630841875 x9 − 307629132525 x7 + 78646056489 x5

134217728

134217728

134217728

− 10402917525 x3 + 703956825 x + 1

134217728

134217728 2

Now f and F1 are plotted in Figure 2.8 over the range x = −1 to 1, and are represented by dashed and solid curves, respectively.

> plot([f,F1],x=-1..1,thickness=2,linestyle=[3,1]);
Two features of the Legendre series are quite clear from the picture, and can be conﬁrmed by taking N larger. (You will have to adjust the view and number of digits and plotting points.) The series curve displays a Gibb’s phenomenon and also passes through the midpoint of the step.

80

CHAPTER 2. APPLICATIONS OF SERIES

1

–1

0

x

1

Figure 2.8: Dashed curve, Step function f . Solid curve, Legendre series F1 .

The area between the Legendre series curve and the x-axis is now calculated and found to be exactly the same as the area for the step function.
> Area:=int(F1,x=-1..1); Area := 1
2.4 Summing Series
In this section, two diﬀerent approaches to summing inﬁnite series are presented. The ﬁrst recipe makes use of ideas already introduced in the earlier Fourier series examples. In the second recipe, the series to be summed is replaced by a complex series which Maple is able to sum.

2.4.1 I. M. Curious Sums a Series
Once, I thought I made a mistake, but I was mistaken. From the diary of I. M. Curious

In this recipe, Ms. Curious answers the following question: By expanding f (x) = x(L − x), deﬁned in the interval (0, L) with L = π, in
a Fourier sine series of period 2L and setting x = L/2, prove that

∞ (−1)n

π3

(2n + 1)3

=

. 32

n=0

Conﬁrm this result by directly summing the series with Maple, ﬁrst showing

that the sum can be expressed as either a generalized hypergeometric function

or as a polylogarithm function.

I. M. begins her solution by assuming that the Fourier series summation

indices m and n are integers. She then sets L = π and enters f = x (L − x).

2.4. SUMMING SERIES

81

> restart: assume(m::integer,n::integer):

> L:=Pi: f:=x*(L-x): To expand f in a Fourier sine series of period 2 L, she forms the following odd piecewise function, pw , deﬁned in the interval −L < x < L.

> pw:=piecewise(x<0,x*(L+x),x>0,f);

pw :=

x (π + x) x (π − x)

x<0 0<x

I. M. then calculates the Fourier coeﬃcients a0, am for m = 0, and bm.

> a[0]:=(1/L)*int(pw,x=-L..L); a0 := 0

> a[m]:=(1/L)*int(pw*cos(m*Pi*x/L),x=-L..L); am := 0

> b[m]:=(1/L)*int(pw*sin(m*Pi*x/L),x=-L..L);

bm

:=

−4

(−1 + (−1)m) π m3

She notices that in bm the coeﬃcients are only non-zero if m is an odd integer.

So she substitutes m = 2 n + 1 into bm and relabels the coeﬃcients as b2n+1.

The new summation index n will take on the values n = 0, 1, 2, . . ..

> b[2*n+1]:=simplify(subs(m=2*n+1,b[m]));

8 b2 n+1 := π (2 n + 1)3

Since the coeﬃcients am are zero for all m (and therefore all n), the Fourier

series is then of the form F =

∞ n=0

b2n+1

sin((2n

+

1)πx/L).

> F:=Sum(b[2*n+1]*sin((2*n+1)*Pi*x/L),n=0..infinity);

∞ 8 sin((2 n + 1) x) F := ( π (2 n + 1)3 )
n=0
Thus, the original function f in the region 0 < x < L can be written as the

Fourier sine series F . This is entered in eq1 .

> eq1:=f=F;

∞ 8 sin((2 n + 1) x)

eq1 := x (π − x) = ( π (2 n + 1)3 )

n=0

eq1 is divided by 8 and evaluated at x = L/2.

> eq2:=eval(eq1/8,x=L/2);

π2 1 ∞ 8 (−1)n

eq2 := = 32 8

( π (2 n + 1)3 )

n=0

Multiplying eq2 by π, and expanding, conﬁrms the series sum.

> eq3:=expand(Pi*eq2);

82

CHAPTER 2. APPLICATIONS OF SERIES

π3 ∞ (−1)n

eq3 := = 32

(2 n + 1)3

n=0

To sum the series directly with Maple, I. M. extracts it from the rhs of eq3 .

> S:=rhs(eq3);

∞ (−1)n S := (2 n + 1)3
n=0

She expresses the sum S as a hypergeometric function by applying the following

convert command.

> S:=convert(S,hypergeom);

S

:=

1 hypergeom([ ,

1 ,

1 ,

1],

3 [,

3 ,

3 ],

−1)

222 222

If this function is unfamiliar to you, highlight hypergeom in the computer out-

put with your mouse and open the relevant help window to see its deﬁnition.

According to Help, it may be possible to convert the hypergeometric function into one of the standard special and elementary functions found in such texts

as Handbook of Mathematical Functions by Abramowitz and Stegun ([AS72]).

Applying the convert(StandardFunctions) command,

> S:=convert(S,StandardFunctions);

S

:=

−

1 2

I

polylog(3,

I)

+

1 2

I

polylog(3,

−I )

yields a combination of polylog functions. Again, if the polylogarithm function

is unfamiliar, it may be looked up in Maple’s Help. I. M. ﬁnally obtains the

desired form of the series sum by using simplify.

> S:=simplify(S);

π3 S :=
32

2.4.2 Spiegel’s Series Problem

Old age is that time of life when you can feel bad in the morning without having had fun the night before. Gregarius Nerd, Professor of Mathematics, Erehwon Institute of Technology

In the previous example, we saw that Maple was successful in summing the

given series. If Maple is unsuccessful, does that mean that the series cannot be

summed? Not necessarily, as you will now see. Sometimes it needs a bit of help

in the form of human brain power. This will not be the last time in this book

that this is the case.

Let’s consider the following inﬁnite series,

r sin(φ) + 1 r3 sin(3 φ) + 1 r5 sin(5 φ) + 1 r7 sin(7 φ) + · · · ,

3

5

7

(2.13)

which, according to the Schaum Outline Series on Advanced Mathematics by

Murray Spiegel ([Spi71]), arises from solving for the steady-state temperature

2.4. SUMMING SERIES

83

distribution in a thin circular plate of unit radius whose faces are insulated and has each half of its boundary kept at a diﬀerent constant temperature. In polar coordinates, r is the radial distance from the center of the plate and φ the polar angle. Spiegel’s Problem 12.52 is to show that the series can be summed and cast into the form (1/2) tan−1(2r sin φ/(1 − r2)).
The following recipe solves Spiegel’s problem. An operator S is formed to generate the series out to exponent 2 N + 1.

> restart:

> S:=N->sum(rˆ(2*m+1)*sin((2*m+1)*phi)/(2*m+1),m=0..N);

N r(2 m+1) sin((2 m + 1) φ) S := N →
2m+1
m=0
Taking N = 3, then entering S(3) generates the terms displayed in (2.13).

> S1:=S(3);

S1 := r sin(φ) + 1 r3 sin(3 φ) + 1 r5 sin(5 φ) + 1 r7 sin(7 φ)

3

5

7

Taking N = ∞ in S and applying the value command, we ﬁnd that Maple is

unable to directly sum the series, returning the unevaluated sum in S2 .

> S2:=value(S(infinity));
∞ r(2 m+1) sin((2 m + 1) φ) S2 :=
2m+1
m=0
To sum the series, note that the real series can be written as the imaginary part of a complex series. To accomplish this, the summand in √S2 can be taken as the imaginary part of a complex summand, viz., with I ≡ −1,

r 2m+1 eI (2m+1)φ

(reIφ)2m+1

z2m+1

Im

= Im

= Im

2m + 1

2m + 1

2m + 1

with z ≡ reIφ. Using this result, the complex series, CS , is entered and then successfully summed.

> CS:=Sum(zˆ(2*m+1)/(2*m+1),m=0..infinity);
∞ z(2 m+1) CS :=
2m+1
m=0
> CS:=value(CS);
1 1+z CS := ln( )
2 1−z Then, z = reIφ is substituted into CS ,

> CS2:=subs(z=r*exp(I*phi),CS);

1 1 + r e(φ I)

CS2 := ln(

)

2 1 − r e(φ I)

and the complex result CS2 broken into real and imaginary parts in CS3 with

the complex evaluation command and simpliﬁed in CS4 assuming r < 1.

84

CHAPTER 2. APPLICATIONS OF SERIES

> CS3:=evalc(CS2); > CS4:=simplify(CS3) assuming r<1;

1 r2 + 2 r cos(φ) + 1

CS4

:=

4

ln( 1

−

2r

cos(φ)

+

r2 )

+

1 2

I

arctan( 1

−

2 r sin(φ) 2 r cos(φ) +

r2

,

− 1

−

−1 + r2 2 r cos(φ)

+

r2

)

The portion of the argument in arctan before the comma is the numerator, the

portion after the comma being the denominator. To extract the imaginary part

of CS4 , the coeff command is used to pull out the coeﬃcient of I.

> S3:=coeff(CS4,I);

S3

:=

1 2

arctan( 1−

2 r sin(φ) 2 r cos(φ) +

r2 ,

−

1

−

−1 + r2 2 r cos(φ)

+

r2 )

The operand command, op is used to write the series sum in a form which

agrees with the result quoted by Spiegel.

> S4:=op(1,S3)*arctan((op([2,1],S3)/op([2,2],S3)));

1

2 r sin(φ)

S4

:=

− 2

arctan(

−1 + r2

)

2.5 Supplementary Recipes

02-S01: Euler and Bernoulli Numbers

(a) Taylor expand sec(z), dropping terms of O(z12). The Euler numbers E2n are deﬁned by sec(z) = ∞ n=0(−1)n E2n z2n/(2n)! Using the Euler number command euler(2*n), conﬁrm that the latter expansion of sec(z) agrees

with the Taylor expansion. Generate the Euler numbers E0, E2, E4,...,E10.

(b) Taylor expand z/(ez − 1), dropping terms of O(z12). The Bernoulli num-

bers Bn are deﬁned by z/(ez − 1) =

∞ n=0

Bn

zn

/n!

Using

the

Bernoulli

number command bernoulli(n), conﬁrm that the latter expansion agrees

with the Taylor expansion. Generate the ﬁrst 10 Bernoulli numbers.

02-S02: Ms. Curious Approximates an Integral

Ms. Curious has been given the following problem to solve. Consider the integral

f (x) =

x 0

sin(t2)

dt.

Evaluate this integral analytically and identify the function

which occurs. Obtain the smallest polynomial approximation to f (x) which is

valid within ±0.00001 for 0 ≤ x ≤ 1.

02-S03: More Finite Diﬀerence Approximations (a) Conﬁrm the following ﬁnite diﬀerence approximation,
y (x) = [y(x + 2h) − 4y(x + h) + 6y(x) − 4y(x − h) + y(x − 2h)]/h4.
Suggest a physical problem for which this FDA might be useful. Taking y = x4.7, graphically compare and discuss the FDA (with h = 0.1 and 12 digits accuracy) with the exact 4th derivative over the range x = 0 to 70.

2.5 SUPPLEMENTARY RECIPES

85

(b) Show that an FDA to the Laplacian, ∇2f (x, y) ≡ ∂2f /∂x2 +∂2f /∂y2, is
∇2f (x, y) = (1/12 h2)[16 [f (x+h, y) + f (x, y+h)+f (x − h, y)+f (x, y − h)]
−[f (x+2 h, y)+f (x, y+2 h)+f (x − 2 h, y)+f (x, y − 2 h)+60 f (x, y)]].
Suggest a physical problem for which this FDA might be useful. Considering f (x, y) = e−x2 y2 and taking h = 0.1 and 10 digits accuracy, produce a 3-dimensional color-coded plot of the diﬀerence between the exact 2dimensional Laplacian and the FDA for the range x = −2..2, y = −2..2.
02-S04: Series Solution Mimicking a hand calculation, obtain a general series solution, valid near x = 0, of the following LODE
x y + 2 y + x y = 0. Show that the series solution may be expressed in a closed form. Conﬁrm this closed-form solution by directly solving the LODE with the dsolve command.
02-S05: Chebyshev Polynomials Revisited Obtain a general series solution of Chebyshev’s equation,
(1 − x2) y − x y + p2 y = 0 valid near x = 0, by (a) mimicking a hand calculation, (b) using the series option in the dsolve command. If p is a positive integer, show that one or the other of the series in the general solution reduces to a ﬁnite polynomial. These polynomials are the Chebyshev polynomials. The zeroth order Chebyshev polynomial T0(x) = 1. The higher order polynomials Tm(x) are normalized so that the coeﬃcient of the largest power in the mth order polynomial is 2(m−1). Derive the Chebyshev polynomials T1, T2, ..., T7 and plot T1 to T5 over the range x = −1 to 1. Note that the non-ﬁnite-polynomial parts of the solution diverge at the end points of the range and are rejected in physical problems.
02-S06: A Fourier Series Expand f (θ) = θ2, 0 < θ < 2 π, in a Fourier series F of period 2 π. Plot f and F (for an upper value N = 20 of the summation index) in the same ﬁgure.
02-S07: Fourier Sine Series Taking L = 1, expand each of the following f (x) in a Fourier sine series F of period 2L, over the interval (0, L):
(a) f (x) = x (L − x); (b) f (x) = x, 0 < x < L/2, and f (x) = L − x, L/2 < x < L;
(c) f (x) = 1, 0 < x < L/2, and f (x) = 0, L/2 < x < L.
In each case plot f (x) and F (for an upper value N = 10 of the summation index) in the same ﬁgure and discuss the goodness of the ﬁt.
02-S08: Fourier Cosine Series Taking L = 1, expand each of the f (x) given in 02-S07 in a Fourier cosine series

86

CHAPTER 2. APPLICATIONS OF SERIES

F of period 2L, over the interval (0, L). In each case plot f (x) and F (for an upper value N = 10 of the summation index) in the same ﬁgure and discuss the goodness of the ﬁt.

02-S09: Legendre Series Expand the following f (x) in a series F of Legendre polynomials (up to n = N = 15) and plot f and F together in the same ﬁgure:
(a) f (x) = 0, −1 < x < 0, and f (x) = 1, 0 < x < 1; (b) f (x) = 0, −1 < x < 0, and f (x) = x, 0 < x < 1.

02-S10: Directly Evaluating Series Sum Write the following inﬁnite series out in the summation notation and then use Maple to directly evaluate the series sum in closed form:

(a) f (x) = 1 + 2 x + 3 x2 + 4 x3 + · · ·

1

x

x2

x3

(b)

f (x) =

+ 1·2

2·3

+ 3·4

+

4·5 +···

(c)

f

=

1 +
1·3

1 2·4

1 +
3·5

+

1 4·

6

+

·

·

·

4 x3 9 x5 16 x7

(d) f (x) = x − + −

+···

3! 5! 7!

02-S11: Another Cosine Series

Expand f (x) = sin(x), 0 < x < π, in a Fourier cosine series F . Explicitly write

out F for the ﬁrst 5 non-zero terms and plot F and f (x) together. Use F to

prove

∞ n=1

1/(4n2

− 1) = 1/2.

Conﬁrm

this

by

directly

summing

with

Maple.

02-S12: The Complex Series Trick Again In a certain 2-dimensional electrostatic potential problem, the following inﬁnite series occurs:

S

=

sin(

π

x

)

e−

πy a

+

1

sin(

3

π

x

)

e−

3

π a

y

+

1

sin(

5

π

x

)

e−

5

π a

y

+···

a

3

a

5

a

Show that the series can be summed and put into the form

1

sin(π x/a)

S = arctan

.

2

sinh(π y/a)

Chapter 3
Vectors and Matrices
In the ﬁrst section of this chapter, we see how Maple may be used to deal with vectors in Cartesian coordinates. Examples of vector algebra, the dot and cross products, the gradient operator, and vector identities are presented.
The second section extends the discussion to vectors in orthogonal1 curvilinear coordinate systems such as spherical polar, cylindrical, and others. The vector operators gradient, divergence, curl, and Laplacian are considered and various important identities and theorems are illustrated.
The third section looks at the manipulation of matrices. Examples of matrix addition and multiplication, calculating the transpose and inverse and eigenvalues and eigenvectors, and diagonalizing and rotating matrices, are provided.
3.1 Vectors: Cartesian Coordinates
For Cartesian coordinates x, y, and z, the unit vectors ˆex, ˆey, and ˆez always point along the x, y, and z axes for every point in space. A general vector A is of the form A = Ax ˆex + Ay ˆey + Az ˆez. If A is a function of the coordinates, then A is called a vector ﬁeld.
The sum of two vectors A and B is given by A + B = (Ax + Bx) ˆex + (Ay + By) ˆey + (Az + Bz) ˆez.
The dot or scalar product between two vectors A and B is deﬁned by A · B = A B cos θ,
where A = A2x + A2y + A2z and B = Bx2 + By2 + Bz2 are the magnitudes of A and B, respectively.
The cross or vector product of A and B, written as A × B, is another vector whose magnitude |A × B| = A B sin θ. The direction of A × B is given by the right-hand rule. Put the ﬁngers of the right hand along A and curl them towards B in the direction of the smaller angle between A and B. The thumb then points in the direction of the new vector.
1The angle between the unit vectors is 90◦.

